'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isTerminating = exports.isIdentifierPart = exports.isIdentifierStart = exports.isDecimalDigit = exports.isWhiteSpace = exports.isLineTerminator = undefined;
exports.getHexValue = getHexValue;
exports.skipSingleLineComment = skipSingleLineComment;
exports.scanUnicode = scanUnicode;
exports.readStringEscape = readStringEscape;
exports.insertSequence = insertSequence;
exports.retrieveSequenceLength = retrieveSequenceLength;
exports.isExprPrefix = isExprPrefix;
exports.isRegexPrefix = isRegexPrefix;

var _readtable = require('readtable');

var _immutable = require('immutable');

var _esutils = require('esutils');

var _tokens = require('../tokens');

var _ramda = require('ramda');

var R = _interopRequireWildcard(_ramda);

var _ramdaFantasy = require('ramda-fantasy');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const { isLineTerminator,
  isWhiteSpace,
  isDecimalDigit,
  isIdentifierPartES6: isIdentifierPart,
  isIdentifierStartES6: isIdentifierStart } = _esutils.code;

const Nothing = _ramdaFantasy.Maybe.Nothing;

// TODO: also, need to handle contextual yield
const literalKeywords = ['this', 'null', 'true', 'false'];

exports.isLineTerminator = isLineTerminator;
exports.isWhiteSpace = isWhiteSpace;
exports.isDecimalDigit = isDecimalDigit;
exports.isIdentifierStart = isIdentifierStart;
exports.isIdentifierPart = isIdentifierPart;
function getHexValue(rune) {
  if ('0' <= rune && rune <= '9') {
    return rune.charCodeAt(0) - 48;
  }
  if ('a' <= rune && rune <= 'f') {
    return rune.charCodeAt(0) - 87;
  }
  if ('A' <= rune && rune <= 'F') {
    return rune.charCodeAt(0) - 55;
  }
  return -1;
}

function skipSingleLineComment(stream) {
  let idx = 0;
  let char = stream.peek(idx);
  while (!(0, _readtable.isEOS)(char)) {
    let chCode = char.charCodeAt(0);
    if (isLineTerminator(chCode)) {
      ++idx;
      if (chCode === 0xD /* "\r" */ && stream.peek(idx).charCodeAt(0) === 0xA /*"\n" */) {
          ++idx;
        }
      this.incrementLine();
      break;
    }
    ++idx;
    char = stream.peek(idx);
  }
  stream.readString(idx);
}

function scanUnicode(stream, start) {
  const sPeek = stream.peek.bind(stream);
  let idx = start;
  let hexDigits = 0;
  if (sPeek(idx) === '{') {
    //\u{HexDigits}
    ++idx;
    let char = sPeek(idx);
    while (!(0, _readtable.isEOS)(char)) {
      let hex = getHexValue(char);
      if (hex === -1) break;
      hexDigits = hexDigits << 4 | hex;
      if (hexDigits > 0x10FFFF) {
        throw this.createILLEGAL(char);
      }
      char = sPeek(++idx);
    }
    if (char !== '}') {
      throw this.createILLEGAL(char);
    }
    if (idx === start + 1) {
      throw this.createILLEGAL(stream.peek(idx + 1));
    }
    ++idx;
  } else {
    //\uHex4Digits
    if ((0, _readtable.isEOS)(sPeek(idx + 3))) return -1;
    let r;
    for (; idx < start + 4; ++idx) {
      r = getHexValue(sPeek(idx));
      if (r === -1) return -1;
      hexDigits = hexDigits << 4 | r;
    }
  }
  stream.readString(idx);

  return hexDigits;
}

function readStringEscape(str, stream, start, octal) {
  let idx = start + 1,
      char = stream.peek(idx),
      lineStart;
  if ((0, _readtable.isEOS)(char)) throw this.createILLEGAL(char);

  if (!isLineTerminator(char.charCodeAt(0))) {
    switch (char) {
      case 'b':
        str += '\b';++idx;break;
      case 'f':
        str += '\f';++idx;break;
      case 'n':
        str += '\n';++idx;break;
      case 'r':
        str += '\r';++idx;break;
      case 't':
        str += '\t';++idx;break;
      case 'v':
        str += '\u000B';++idx;break;
      case 'u':
      case 'x':
        {
          let unescaped;
          ++idx;
          let nxt = stream.peek(idx);
          if ((0, _readtable.isEOS)(nxt)) {
            throw this.createILLEGAL(nxt);
          }
          unescaped = char === 'u' ? scanUnicode.call(this, stream, idx) : scanHexEscape2.call(this, stream);
          if (unescaped === -1) throw this.createILLEGAL(char);
          idx = 0; // stream is read in scanUnicode and scanHexEscape2

          str += String.fromCodePoint(unescaped);
          break;
        }
      default:
        {
          if ('0' <= char && char <= '7') {
            [str, idx, octal] = scanOctal.call(this, str, stream, char, idx, octal);
          } else if (char === '8' || char === '9') {
            throw this.createILLEGAL(char);
          } else {
            str += char;
            ++idx;
          }
        }
    }
  } else {
    if (char === '\r' && stream.peek(idx + 1) === '\n') {
      ++idx;
    }
    ++idx;
    this.incrementLine();
    lineStart = idx;
  }
  return [str, idx, octal, lineStart];
}

function scanOctal(str, stream, char, start, octal) {
  let len = 1,
      idx = start;
  if ('0' <= char && char <= '3') {
    len = 0;
  }
  let code = 0;

  while (len < 3 && '0' <= char && char <= '7') {
    ++idx;
    if (len > 0 || char !== '0') {
      if (octal == null) octal = '';
      octal += char;
    }
    code *= 8;
    code += +char; //coersion
    ++len;
    char = stream.peek(idx);
    if ((0, _readtable.isEOS)(char)) {
      throw this.createILLEGAL(char);
    }
  }
  str += String.fromCharCode(code);
  return [str, idx, octal];
}

function scanHexEscape2(stream, idx) {
  let char = stream.peek(idx);

  if ((0, _readtable.isEOS)(char)) return -1;

  let r1 = getHexValue(stream.peek());
  if (r1 === -1) return r1;

  let r2 = getHexValue(stream.peek(1));
  if (r2 === -1) return r2;

  stream.readString(2);
  return r1 << 4 | r2;
}

function insertSequence(coll, seq) {
  const char = seq[0];
  if (!coll[char]) {
    coll[char] = {};
  }
  if (seq.length === 1) {
    coll[char].isValue = true;
    return coll;
  } else {
    coll[char] = insertSequence(coll[char], seq.slice(1));
    return coll;
  }
}

const isTerminating = exports.isTerminating = table => char => table.getMapping(char).mode === 'terminating';

// check for terminating doesn't work if it's at the start
function retrieveSequenceLength(table, stream, idx) {
  const char = stream.peek(idx);
  if (!table[char]) {
    if (table.isValue) return idx;
    return -1;
  } else {
    return retrieveSequenceLength(table[char], stream, ++idx);
  }
}

const assignOps = ['=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=', '^=', ','];

const binaryOps = ['+', '-', '*', '/', '%', '<<', '>>', '>>>', '&', '|', '^', '&&', '||', '?', ':', '===', '==', '>=', '<=', '<', '>', '!=', '!==', 'instanceof'];

const unaryOps = ['++', '--', '~', '!', 'delete', 'void', 'typeof', 'yield', 'throw', 'new'];

const allOps = assignOps.concat(binaryOps).concat(unaryOps);

function isNonLiteralKeyword(t) {
  return (0, _tokens.isKeyword)(t) && t.value && !R.contains(t.value, literalKeywords);
}
const exprPrefixKeywords = ['instanceof', 'typeof', 'delete', 'void', 'yield', 'throw', 'new', 'case'];

function isExprReturn(l, p) {
  // ... return {x: 42} /r /i
  // ... return\n{x: 42} /r /i
  return popRestMaybe(p).map(([retKwd, rest]) => (0, _tokens.isKeyword)(retKwd, 'return') && (0, _tokens.getLineNumber)(retKwd) === l).getOrElse(false);
}

// List a -> Boolean
function isTopPunctuator(p) {
  return popMaybe(p).map(punc => (0, _tokens.isPunctuator)(punc)).getOrElse(false);
}

function isOperator(op) {
  if (((0, _tokens.isPunctuator)(op) || (0, _tokens.isKeyword)(op)) && op.value != null) {
    const opVal = op.value; // the const is because flow doesn't know op.value isn't mutated
    return allOps.some(o => o === opVal);
  }
  return false;
}

function isTopOperator(p) {
  return popMaybe(p).map(op => {
    return isOperator(op);
  }).getOrElse(false);
}

function isExprPrefixKeyword(kwd) {
  return (0, _tokens.isKeyword)(kwd, exprPrefixKeywords);
}

function isTopKeywordExprPrefix(p) {
  return popMaybe(p).map(kwd => {
    return isExprPrefixKeyword(kwd);
  }).getOrElse(false);
}

function isTopColon(p) {
  return popMaybe(p).map(colon => {
    if ((0, _tokens.isPunctuator)(colon, ':')) {
      return true;
    }
    return false;
  }).getOrElse(false);
}

function isExprPrefix(l, b, p) {
  if (p.size === 0) {
    // ... ({x: 42} /r/i)
    return b;
  } else if (isTopColon(p)) {
    // ... ({x: {x: 42} /r/i })
    return b;
  } else if (isTopKeywordExprPrefix(p)) {
    // ... throw {x: 42} /r/i
    return true;
  } else if (isTopOperator(p)) {
    // ... 42 + {x: 42} /r/i
    return true;
  } else if (isTopPunctuator(p)) {
    // ... for ( ; {x: 42}/r/i)
    return b;
  } else if (isExprReturn(l, p)) {
    // ... return {x: 42} /r /i
    // ... return\n{x: 42} /r /i
    return true;
  }
  return false;
}

function popMaybe(p) {
  if (p.size >= 1) {
    return _ramdaFantasy.Maybe.of(p.last());
  }
  return Nothing();
}

function isTopStandaloneKeyword(prefix) {
  // P . t . t'  where t \not = "." and t' ∈ (Keyword \setminus  LiteralKeyword)
  return popRestMaybe(prefix).map(([kwd, rest]) => {
    if (isNonLiteralKeyword(kwd)) {
      return _ramdaFantasy.Maybe.maybe(true, dot => !(0, _tokens.isPunctuator)(dot, '.'), popMaybe(rest));
    }
    return false;
  }).getOrElse(false);
}

function isTopParensWithKeyword(prefix) {
  // P . t . t' . (T)  where t \not = "." and t' ∈ (Keyword \setminus LiteralKeyword)
  return popRestMaybe(prefix).chain(([paren, rest]) => (0, _tokens.isParens)(paren) ? popRestMaybe(rest) : Nothing()).map(([kwd, rest]) => {
    if (isNonLiteralKeyword(kwd)) {
      return _ramdaFantasy.Maybe.maybe(true, dot => !(0, _tokens.isPunctuator)(dot, '.'), popMaybe(rest));
    }
    return false;
  }).getOrElse(false);
}

function popRestMaybe(p) {
  if (p.size > 0) {
    let last = p.last();
    let rest = p.pop();
    return _ramdaFantasy.Maybe.of([last, rest]);
  }
  return Nothing();
}

function isTopFunctionExpression(prefix, exprAllowed) {
  // P . function^l . x? . () . {}     where isExprPrefix(P, b, l) = false
  return popRestMaybe(prefix).chain(([curly, rest]) => {
    if ((0, _tokens.isBraces)(curly)) {
      return popRestMaybe(rest);
    }
    return Nothing();
  }).chain(([paren, rest]) => {
    if ((0, _tokens.isParens)(paren)) {
      return popRestMaybe(rest);
    }
    return Nothing();
  }).chain(([optIdent, rest]) => {
    if ((0, _tokens.isIdentifier)(optIdent)) {
      return popRestMaybe(rest);
    }
    return _ramdaFantasy.Maybe.of([optIdent, rest]);
  }).chain(([fnKwd, rest]) => {
    if ((0, _tokens.isKeyword)(fnKwd, 'function')) {
      let l = (0, _tokens.getLineNumber)(fnKwd);
      if (l == null) {
        throw new Error('Un-expected null line number');
      }
      return _ramdaFantasy.Maybe.of(!isExprPrefix(l, exprAllowed, rest));
    }
    return _ramdaFantasy.Maybe.of(false);
  }).getOrElse(false);
}

function isTopObjectLiteral(prefix, exprAllowed) {
  // P . {T}^l  where isExprPrefix(P, b, l) = false
  return popRestMaybe(prefix).chain(([braces, rest]) => {
    if ((0, _tokens.isBraces)(braces)) {
      let l = (0, _tokens.getLineNumber)(braces);
      if (l == null) {
        throw new Error('Un-expected null line number');
      }
      return _ramdaFantasy.Maybe.of(!isExprPrefix(l, exprAllowed, rest));
    }
    return _ramdaFantasy.Maybe.of(false);
  }).getOrElse(false);
}

function isTopFunction(prefix) {
  // P . function^l . x? . () . {}     where isExprPrefix(P, b, l) = false
  return popRestMaybe(prefix).chain(([curly, rest]) => {
    if ((0, _tokens.isBraces)(curly)) {
      return popRestMaybe(rest);
    }
    return Nothing();
  }).chain(([paren, rest]) => {
    if ((0, _tokens.isParens)(paren)) {
      return popRestMaybe(rest);
    }
    return Nothing();
  }).chain(([optIdent, rest]) => {
    if ((0, _tokens.isIdentifier)(optIdent)) {
      return popRestMaybe(rest);
    }
    return _ramdaFantasy.Maybe.of([optIdent, rest]);
  }).chain(([fnKwd, rest]) => {
    if ((0, _tokens.isKeyword)(fnKwd, 'function')) {
      return _ramdaFantasy.Maybe.of(true);
    }
    return _ramdaFantasy.Maybe.of(false);
  }).getOrElse(false);
}

function isRegexPrefix(exprAllowed, prefix) {
  if (prefix.isEmpty()) {
    // ε
    return true;
  } else if (isTopPunctuator(prefix)) {
    // P . t   where t ∈ Punctuator
    return true;
  } else if (isTopStandaloneKeyword(prefix)) {
    // P . t . t'  where t \not = "." and t' ∈ (Keyword \setminus  LiteralKeyword)
    return true;
  } else if (isTopParensWithKeyword(prefix)) {
    // P . t . t' . (T)  where t \not = "." and t' ∈ (Keyword \setminus LiteralKeyword)
    return true;
  } else if (isTopFunction(prefix)) {
    // P . function^l . x? . () . {}     where isExprPrefix(P, b, l) = false
    return isTopFunctionExpression(prefix, exprAllowed);
  } else if (isTopObjectLiteral(prefix, exprAllowed)) {
    // P . {T}^l  where isExprPrefix(P, b, l) = false
    return true;
  }
  return false;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yZWFkZXIvdXRpbHMuanMiXSwibmFtZXMiOlsiZ2V0SGV4VmFsdWUiLCJza2lwU2luZ2xlTGluZUNvbW1lbnQiLCJzY2FuVW5pY29kZSIsInJlYWRTdHJpbmdFc2NhcGUiLCJpbnNlcnRTZXF1ZW5jZSIsInJldHJpZXZlU2VxdWVuY2VMZW5ndGgiLCJpc0V4cHJQcmVmaXgiLCJpc1JlZ2V4UHJlZml4IiwiUiIsImlzTGluZVRlcm1pbmF0b3IiLCJpc1doaXRlU3BhY2UiLCJpc0RlY2ltYWxEaWdpdCIsImlzSWRlbnRpZmllclBhcnRFUzYiLCJpc0lkZW50aWZpZXJQYXJ0IiwiaXNJZGVudGlmaWVyU3RhcnRFUzYiLCJpc0lkZW50aWZpZXJTdGFydCIsIk5vdGhpbmciLCJsaXRlcmFsS2V5d29yZHMiLCJydW5lIiwiY2hhckNvZGVBdCIsInN0cmVhbSIsImlkeCIsImNoYXIiLCJwZWVrIiwiY2hDb2RlIiwiaW5jcmVtZW50TGluZSIsInJlYWRTdHJpbmciLCJzdGFydCIsInNQZWVrIiwiYmluZCIsImhleERpZ2l0cyIsImhleCIsImNyZWF0ZUlMTEVHQUwiLCJyIiwic3RyIiwib2N0YWwiLCJsaW5lU3RhcnQiLCJ1bmVzY2FwZWQiLCJueHQiLCJjYWxsIiwic2NhbkhleEVzY2FwZTIiLCJTdHJpbmciLCJmcm9tQ29kZVBvaW50Iiwic2Nhbk9jdGFsIiwibGVuIiwiY29kZSIsImZyb21DaGFyQ29kZSIsInIxIiwicjIiLCJjb2xsIiwic2VxIiwibGVuZ3RoIiwiaXNWYWx1ZSIsInNsaWNlIiwiaXNUZXJtaW5hdGluZyIsInRhYmxlIiwiZ2V0TWFwcGluZyIsIm1vZGUiLCJhc3NpZ25PcHMiLCJiaW5hcnlPcHMiLCJ1bmFyeU9wcyIsImFsbE9wcyIsImNvbmNhdCIsImlzTm9uTGl0ZXJhbEtleXdvcmQiLCJ0IiwidmFsdWUiLCJjb250YWlucyIsImV4cHJQcmVmaXhLZXl3b3JkcyIsImlzRXhwclJldHVybiIsImwiLCJwIiwicG9wUmVzdE1heWJlIiwibWFwIiwicmV0S3dkIiwicmVzdCIsImdldE9yRWxzZSIsImlzVG9wUHVuY3R1YXRvciIsInBvcE1heWJlIiwicHVuYyIsImlzT3BlcmF0b3IiLCJvcCIsIm9wVmFsIiwic29tZSIsIm8iLCJpc1RvcE9wZXJhdG9yIiwiaXNFeHByUHJlZml4S2V5d29yZCIsImt3ZCIsImlzVG9wS2V5d29yZEV4cHJQcmVmaXgiLCJpc1RvcENvbG9uIiwiY29sb24iLCJiIiwic2l6ZSIsIm9mIiwibGFzdCIsImlzVG9wU3RhbmRhbG9uZUtleXdvcmQiLCJwcmVmaXgiLCJtYXliZSIsImRvdCIsImlzVG9wUGFyZW5zV2l0aEtleXdvcmQiLCJjaGFpbiIsInBhcmVuIiwicG9wIiwiaXNUb3BGdW5jdGlvbkV4cHJlc3Npb24iLCJleHByQWxsb3dlZCIsImN1cmx5Iiwib3B0SWRlbnQiLCJmbkt3ZCIsIkVycm9yIiwiaXNUb3BPYmplY3RMaXRlcmFsIiwiYnJhY2VzIiwiaXNUb3BGdW5jdGlvbiIsImlzRW1wdHkiXSwibWFwcGluZ3MiOiI7Ozs7OztRQTBCZ0JBLFcsR0FBQUEsVztRQWFBQyxxQixHQUFBQSxxQjtRQW1CQUMsVyxHQUFBQSxXO1FBdUNBQyxnQixHQUFBQSxnQjtRQTJGQUMsYyxHQUFBQSxjO1FBaUJBQyxzQixHQUFBQSxzQjtRQThFQUMsWSxHQUFBQSxZO1FBNklBQyxhLEdBQUFBLGE7O0FBdGFoQjs7QUFDQTs7QUFJQTs7QUFFQTs7QUFRQTs7SUFBWUMsQzs7QUFDWjs7OztBQVBBLE1BQU0sRUFBRUMsZ0JBQUY7QUFDRUMsY0FERjtBQUVFQyxnQkFGRjtBQUdFQyx1QkFBcUJDLGdCQUh2QjtBQUlFQyx3QkFBc0JDLGlCQUp4QixrQkFBTjs7QUFRQSxNQUFNQyxVQUFVLG9CQUFNQSxPQUF0Qjs7QUFFQTtBQUNBLE1BQU1DLGtCQUFrQixDQUFDLE1BQUQsRUFBUyxNQUFULEVBQWlCLE1BQWpCLEVBQXlCLE9BQXpCLENBQXhCOztRQUVTUixnQixHQUFBQSxnQjtRQUFrQkMsWSxHQUFBQSxZO1FBQWNDLGMsR0FBQUEsYztRQUFnQkksaUIsR0FBQUEsaUI7UUFBbUJGLGdCLEdBQUFBLGdCO0FBRXJFLFNBQVNiLFdBQVQsQ0FBcUJrQixJQUFyQixFQUFtQztBQUN4QyxNQUFJLE9BQU9BLElBQVAsSUFBZUEsUUFBUSxHQUEzQixFQUFnQztBQUM5QixXQUFPQSxLQUFLQyxVQUFMLENBQWdCLENBQWhCLElBQXFCLEVBQTVCO0FBQ0Q7QUFDRCxNQUFJLE9BQU9ELElBQVAsSUFBZUEsUUFBUSxHQUEzQixFQUFnQztBQUM5QixXQUFPQSxLQUFLQyxVQUFMLENBQWdCLENBQWhCLElBQXFCLEVBQTVCO0FBQ0Q7QUFDRCxNQUFJLE9BQU9ELElBQVAsSUFBZUEsUUFBUSxHQUEzQixFQUFnQztBQUM5QixXQUFPQSxLQUFLQyxVQUFMLENBQWdCLENBQWhCLElBQXFCLEVBQTVCO0FBQ0Q7QUFDRCxTQUFPLENBQUMsQ0FBUjtBQUNEOztBQUVNLFNBQVNsQixxQkFBVCxDQUErQm1CLE1BQS9CLEVBQXlEO0FBQzlELE1BQUlDLE1BQU0sQ0FBVjtBQUNBLE1BQUlDLE9BQU9GLE9BQU9HLElBQVAsQ0FBWUYsR0FBWixDQUFYO0FBQ0EsU0FBTyxDQUFDLHNCQUFNQyxJQUFOLENBQVIsRUFBcUI7QUFDbkIsUUFBSUUsU0FBU0YsS0FBS0gsVUFBTCxDQUFnQixDQUFoQixDQUFiO0FBQ0EsUUFBSVYsaUJBQWlCZSxNQUFqQixDQUFKLEVBQThCO0FBQzVCLFFBQUVILEdBQUY7QUFDQSxVQUFJRyxXQUFXLEdBQVgsQ0FBZSxVQUFmLElBQTZCSixPQUFPRyxJQUFQLENBQVlGLEdBQVosRUFBaUJGLFVBQWpCLENBQTRCLENBQTVCLE1BQW1DLEdBQXBFLENBQXdFLFNBQXhFLEVBQW1GO0FBQ2pGLFlBQUVFLEdBQUY7QUFDRDtBQUNELFdBQUtJLGFBQUw7QUFDQTtBQUNEO0FBQ0QsTUFBRUosR0FBRjtBQUNBQyxXQUFPRixPQUFPRyxJQUFQLENBQVlGLEdBQVosQ0FBUDtBQUNEO0FBQ0RELFNBQU9NLFVBQVAsQ0FBa0JMLEdBQWxCO0FBQ0Q7O0FBRU0sU0FBU25CLFdBQVQsQ0FBcUJrQixNQUFyQixFQUF5Q08sS0FBekMsRUFBd0Q7QUFDN0QsUUFBTUMsUUFBUVIsT0FBT0csSUFBUCxDQUFZTSxJQUFaLENBQWlCVCxNQUFqQixDQUFkO0FBQ0EsTUFBSUMsTUFBTU0sS0FBVjtBQUNBLE1BQUlHLFlBQVksQ0FBaEI7QUFDQSxNQUFJRixNQUFNUCxHQUFOLE1BQWUsR0FBbkIsRUFBd0I7QUFDdEI7QUFDQSxNQUFFQSxHQUFGO0FBQ0EsUUFBSUMsT0FBT00sTUFBTVAsR0FBTixDQUFYO0FBQ0EsV0FBTyxDQUFDLHNCQUFNQyxJQUFOLENBQVIsRUFBcUI7QUFDbkIsVUFBSVMsTUFBTS9CLFlBQVlzQixJQUFaLENBQVY7QUFDQSxVQUFJUyxRQUFRLENBQUMsQ0FBYixFQUFnQjtBQUNoQkQsa0JBQWFBLGFBQWEsQ0FBZCxHQUFtQkMsR0FBL0I7QUFDQSxVQUFJRCxZQUFZLFFBQWhCLEVBQTBCO0FBQ3hCLGNBQU0sS0FBS0UsYUFBTCxDQUFtQlYsSUFBbkIsQ0FBTjtBQUNEO0FBQ0RBLGFBQU9NLE1BQU0sRUFBRVAsR0FBUixDQUFQO0FBQ0Q7QUFDRCxRQUFJQyxTQUFTLEdBQWIsRUFBa0I7QUFDaEIsWUFBTSxLQUFLVSxhQUFMLENBQW1CVixJQUFuQixDQUFOO0FBQ0Q7QUFDRCxRQUFJRCxRQUFRTSxRQUFRLENBQXBCLEVBQXVCO0FBQ3JCLFlBQU0sS0FBS0ssYUFBTCxDQUFtQlosT0FBT0csSUFBUCxDQUFZRixNQUFJLENBQWhCLENBQW5CLENBQU47QUFDRDtBQUNELE1BQUVBLEdBQUY7QUFDRCxHQXBCRCxNQW9CTztBQUNMO0FBQ0EsUUFBSSxzQkFBTU8sTUFBTVAsTUFBTSxDQUFaLENBQU4sQ0FBSixFQUEyQixPQUFPLENBQUMsQ0FBUjtBQUMzQixRQUFJWSxDQUFKO0FBQ0EsV0FBT1osTUFBTU0sUUFBUSxDQUFyQixFQUF3QixFQUFFTixHQUExQixFQUErQjtBQUM3QlksVUFBSWpDLFlBQVk0QixNQUFNUCxHQUFOLENBQVosQ0FBSjtBQUNBLFVBQUlZLE1BQU0sQ0FBQyxDQUFYLEVBQWMsT0FBTyxDQUFDLENBQVI7QUFDZEgsa0JBQWFBLGFBQWEsQ0FBZCxHQUFtQkcsQ0FBL0I7QUFDRDtBQUNGO0FBQ0RiLFNBQU9NLFVBQVAsQ0FBa0JMLEdBQWxCOztBQUVBLFNBQU9TLFNBQVA7QUFDRDs7QUFFTSxTQUFTM0IsZ0JBQVQsQ0FBMEIrQixHQUExQixFQUF1Q2QsTUFBdkMsRUFBMkRPLEtBQTNELEVBQTBFUSxLQUExRSxFQUEwRjtBQUMvRixNQUFJZCxNQUFNTSxRQUFRLENBQWxCO0FBQUEsTUFDSUwsT0FBT0YsT0FBT0csSUFBUCxDQUFZRixHQUFaLENBRFg7QUFBQSxNQUVJZSxTQUZKO0FBR0EsTUFBSSxzQkFBTWQsSUFBTixDQUFKLEVBQWlCLE1BQU0sS0FBS1UsYUFBTCxDQUFtQlYsSUFBbkIsQ0FBTjs7QUFFakIsTUFBSSxDQUFDYixpQkFBaUJhLEtBQUtILFVBQUwsQ0FBZ0IsQ0FBaEIsQ0FBakIsQ0FBTCxFQUEyQztBQUN6QyxZQUFRRyxJQUFSO0FBQ0UsV0FBSyxHQUFMO0FBQVVZLGVBQU8sSUFBUCxDQUFhLEVBQUViLEdBQUYsQ0FBTztBQUM5QixXQUFLLEdBQUw7QUFBVWEsZUFBTyxJQUFQLENBQWEsRUFBRWIsR0FBRixDQUFPO0FBQzlCLFdBQUssR0FBTDtBQUFVYSxlQUFPLElBQVAsQ0FBYSxFQUFFYixHQUFGLENBQU87QUFDOUIsV0FBSyxHQUFMO0FBQVVhLGVBQU8sSUFBUCxDQUFhLEVBQUViLEdBQUYsQ0FBTztBQUM5QixXQUFLLEdBQUw7QUFBVWEsZUFBTyxJQUFQLENBQWEsRUFBRWIsR0FBRixDQUFPO0FBQzlCLFdBQUssR0FBTDtBQUFVYSxlQUFPLFFBQVAsQ0FBaUIsRUFBRWIsR0FBRixDQUFPO0FBQ2xDLFdBQUssR0FBTDtBQUNBLFdBQUssR0FBTDtBQUFVO0FBQ1IsY0FBSWdCLFNBQUo7QUFDQSxZQUFFaEIsR0FBRjtBQUNBLGNBQUlpQixNQUFNbEIsT0FBT0csSUFBUCxDQUFZRixHQUFaLENBQVY7QUFDQSxjQUFJLHNCQUFNaUIsR0FBTixDQUFKLEVBQWdCO0FBQ2Qsa0JBQU0sS0FBS04sYUFBTCxDQUFtQk0sR0FBbkIsQ0FBTjtBQUNEO0FBQ0RELHNCQUFZZixTQUFTLEdBQVQsR0FBZXBCLFlBQVlxQyxJQUFaLENBQWlCLElBQWpCLEVBQXVCbkIsTUFBdkIsRUFBK0JDLEdBQS9CLENBQWYsR0FBcURtQixlQUFlRCxJQUFmLENBQW9CLElBQXBCLEVBQTBCbkIsTUFBMUIsQ0FBakU7QUFDQSxjQUFJaUIsY0FBYyxDQUFDLENBQW5CLEVBQXNCLE1BQU0sS0FBS0wsYUFBTCxDQUFtQlYsSUFBbkIsQ0FBTjtBQUN0QkQsZ0JBQU0sQ0FBTixDQVRRLENBU0M7O0FBRVRhLGlCQUFPTyxPQUFPQyxhQUFQLENBQXFCTCxTQUFyQixDQUFQO0FBQ0E7QUFDRDtBQUNEO0FBQVM7QUFDUCxjQUFJLE9BQU9mLElBQVAsSUFBZUEsUUFBUSxHQUEzQixFQUFnQztBQUM5QixhQUFDWSxHQUFELEVBQU1iLEdBQU4sRUFBV2MsS0FBWCxJQUFvQlEsVUFBVUosSUFBVixDQUFlLElBQWYsRUFBcUJMLEdBQXJCLEVBQTBCZCxNQUExQixFQUFrQ0UsSUFBbEMsRUFBd0NELEdBQXhDLEVBQTZDYyxLQUE3QyxDQUFwQjtBQUNELFdBRkQsTUFFTyxJQUFHYixTQUFTLEdBQVQsSUFBZ0JBLFNBQVMsR0FBNUIsRUFBaUM7QUFDdEMsa0JBQU0sS0FBS1UsYUFBTCxDQUFtQlYsSUFBbkIsQ0FBTjtBQUNELFdBRk0sTUFFQTtBQUNMWSxtQkFBT1osSUFBUDtBQUNBLGNBQUVELEdBQUY7QUFDRDtBQUNGO0FBL0JIO0FBaUNELEdBbENELE1Ba0NPO0FBQ0wsUUFBSUMsU0FBUyxJQUFULElBQWlCRixPQUFPRyxJQUFQLENBQVlGLE1BQU0sQ0FBbEIsTUFBeUIsSUFBOUMsRUFBb0Q7QUFDbEQsUUFBRUEsR0FBRjtBQUNEO0FBQ0QsTUFBRUEsR0FBRjtBQUNBLFNBQUtJLGFBQUw7QUFDQVcsZ0JBQVlmLEdBQVo7QUFDRDtBQUNELFNBQU8sQ0FBQ2EsR0FBRCxFQUFNYixHQUFOLEVBQVdjLEtBQVgsRUFBa0JDLFNBQWxCLENBQVA7QUFDRDs7QUFFRCxTQUFTTyxTQUFULENBQW1CVCxHQUFuQixFQUF3QmQsTUFBeEIsRUFBZ0NFLElBQWhDLEVBQXNDSyxLQUF0QyxFQUE2Q1EsS0FBN0MsRUFBb0Q7QUFDbEQsTUFBSVMsTUFBTSxDQUFWO0FBQUEsTUFBYXZCLE1BQU1NLEtBQW5CO0FBQ0EsTUFBSSxPQUFPTCxJQUFQLElBQWVBLFFBQVEsR0FBM0IsRUFBZ0M7QUFDOUJzQixVQUFNLENBQU47QUFDRDtBQUNELE1BQUlDLE9BQU8sQ0FBWDs7QUFFQSxTQUFPRCxNQUFNLENBQU4sSUFBVyxPQUFPdEIsSUFBbEIsSUFBMEJBLFFBQVEsR0FBekMsRUFBOEM7QUFDNUMsTUFBRUQsR0FBRjtBQUNBLFFBQUl1QixNQUFNLENBQU4sSUFBV3RCLFNBQVMsR0FBeEIsRUFBNkI7QUFDM0IsVUFBSWEsU0FBUyxJQUFiLEVBQW1CQSxRQUFRLEVBQVI7QUFDbkJBLGVBQVNiLElBQVQ7QUFDRDtBQUNEdUIsWUFBUSxDQUFSO0FBQ0FBLFlBQVEsQ0FBQ3ZCLElBQVQsQ0FQNEMsQ0FPN0I7QUFDZixNQUFFc0IsR0FBRjtBQUNBdEIsV0FBT0YsT0FBT0csSUFBUCxDQUFZRixHQUFaLENBQVA7QUFDQSxRQUFJLHNCQUFNQyxJQUFOLENBQUosRUFBaUI7QUFDZixZQUFNLEtBQUtVLGFBQUwsQ0FBbUJWLElBQW5CLENBQU47QUFDRDtBQUNGO0FBQ0RZLFNBQU9PLE9BQU9LLFlBQVAsQ0FBb0JELElBQXBCLENBQVA7QUFDQSxTQUFPLENBQUNYLEdBQUQsRUFBTWIsR0FBTixFQUFXYyxLQUFYLENBQVA7QUFDRDs7QUFFRCxTQUFTSyxjQUFULENBQXdCcEIsTUFBeEIsRUFBZ0NDLEdBQWhDLEVBQXFDO0FBQ25DLE1BQUlDLE9BQU9GLE9BQU9HLElBQVAsQ0FBWUYsR0FBWixDQUFYOztBQUVBLE1BQUksc0JBQU1DLElBQU4sQ0FBSixFQUFpQixPQUFPLENBQUMsQ0FBUjs7QUFFakIsTUFBSXlCLEtBQUsvQyxZQUFZb0IsT0FBT0csSUFBUCxFQUFaLENBQVQ7QUFDQSxNQUFJd0IsT0FBTyxDQUFDLENBQVosRUFBZSxPQUFPQSxFQUFQOztBQUVmLE1BQUlDLEtBQUtoRCxZQUFZb0IsT0FBT0csSUFBUCxDQUFZLENBQVosQ0FBWixDQUFUO0FBQ0EsTUFBSXlCLE9BQU8sQ0FBQyxDQUFaLEVBQWUsT0FBT0EsRUFBUDs7QUFFZjVCLFNBQU9NLFVBQVAsQ0FBa0IsQ0FBbEI7QUFDQSxTQUFPcUIsTUFBTSxDQUFOLEdBQVVDLEVBQWpCO0FBQ0Q7O0FBRU0sU0FBUzVDLGNBQVQsQ0FBd0I2QyxJQUF4QixFQUFzQ0MsR0FBdEMsRUFBbUQ7QUFDeEQsUUFBTTVCLE9BQU80QixJQUFJLENBQUosQ0FBYjtBQUNBLE1BQUksQ0FBQ0QsS0FBSzNCLElBQUwsQ0FBTCxFQUFpQjtBQUNmMkIsU0FBSzNCLElBQUwsSUFBYSxFQUFiO0FBQ0Q7QUFDRCxNQUFJNEIsSUFBSUMsTUFBSixLQUFlLENBQW5CLEVBQXNCO0FBQ3BCRixTQUFLM0IsSUFBTCxFQUFXOEIsT0FBWCxHQUFxQixJQUFyQjtBQUNBLFdBQU9ILElBQVA7QUFDRCxHQUhELE1BR087QUFDTEEsU0FBSzNCLElBQUwsSUFBYWxCLGVBQWU2QyxLQUFLM0IsSUFBTCxDQUFmLEVBQTJCNEIsSUFBSUcsS0FBSixDQUFVLENBQVYsQ0FBM0IsQ0FBYjtBQUNBLFdBQU9KLElBQVA7QUFDRDtBQUNGOztBQUVNLE1BQU1LLHdDQUFpQkMsS0FBRCxJQUF1QmpDLElBQUQsSUFBMkJpQyxNQUFNQyxVQUFOLENBQWlCbEMsSUFBakIsRUFBdUJtQyxJQUF2QixLQUFnQyxhQUF2Rzs7QUFFUDtBQUNPLFNBQVNwRCxzQkFBVCxDQUFnQ2tELEtBQWhDLEVBQStDbkMsTUFBL0MsRUFBbUVDLEdBQW5FLEVBQXdGO0FBQzdGLFFBQU1DLE9BQU9GLE9BQU9HLElBQVAsQ0FBWUYsR0FBWixDQUFiO0FBQ0EsTUFBSSxDQUFDa0MsTUFBTWpDLElBQU4sQ0FBTCxFQUFrQjtBQUNoQixRQUFJaUMsTUFBTUgsT0FBVixFQUFtQixPQUFPL0IsR0FBUDtBQUNuQixXQUFPLENBQUMsQ0FBUjtBQUNELEdBSEQsTUFHTztBQUNMLFdBQU9oQix1QkFBdUJrRCxNQUFNakMsSUFBTixDQUF2QixFQUFvQ0YsTUFBcEMsRUFBNEMsRUFBRUMsR0FBOUMsQ0FBUDtBQUNEO0FBQ0Y7O0FBRUQsTUFBTXFDLFlBQWEsQ0FBQyxHQUFELEVBQU0sSUFBTixFQUFZLElBQVosRUFBa0IsSUFBbEIsRUFBd0IsSUFBeEIsRUFBOEIsSUFBOUIsRUFBb0MsS0FBcEMsRUFBMkMsS0FBM0MsRUFBa0QsTUFBbEQsRUFDRCxJQURDLEVBQ0ssSUFETCxFQUNXLElBRFgsRUFDaUIsR0FEakIsQ0FBbkI7O0FBR0EsTUFBTUMsWUFBWSxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxFQUFnQixHQUFoQixFQUFxQixHQUFyQixFQUF5QixJQUF6QixFQUErQixJQUEvQixFQUFxQyxLQUFyQyxFQUE0QyxHQUE1QyxFQUFpRCxHQUFqRCxFQUFzRCxHQUF0RCxFQUNELElBREMsRUFDSyxJQURMLEVBQ1csR0FEWCxFQUNnQixHQURoQixFQUVELEtBRkMsRUFFTSxJQUZOLEVBRVksSUFGWixFQUVrQixJQUZsQixFQUV3QixHQUZ4QixFQUU2QixHQUY3QixFQUVrQyxJQUZsQyxFQUV3QyxLQUZ4QyxFQUUrQyxZQUYvQyxDQUFsQjs7QUFJQSxNQUFNQyxXQUFXLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxHQUFiLEVBQWtCLEdBQWxCLEVBQXVCLFFBQXZCLEVBQWlDLE1BQWpDLEVBQXlDLFFBQXpDLEVBQW1ELE9BQW5ELEVBQTRELE9BQTVELEVBQXFFLEtBQXJFLENBQWpCOztBQUVBLE1BQU1DLFNBQVNILFVBQVVJLE1BQVYsQ0FBaUJILFNBQWpCLEVBQTRCRyxNQUE1QixDQUFtQ0YsUUFBbkMsQ0FBZjs7QUFFQSxTQUFTRyxtQkFBVCxDQUE2QkMsQ0FBN0IsRUFBMkM7QUFDekMsU0FBTyx1QkFBVUEsQ0FBVixLQUFnQkEsRUFBRUMsS0FBbEIsSUFBMkIsQ0FBQ3pELEVBQUUwRCxRQUFGLENBQVdGLEVBQUVDLEtBQWIsRUFBb0JoRCxlQUFwQixDQUFuQztBQUNEO0FBQ0QsTUFBTWtELHFCQUFxQixDQUFDLFlBQUQsRUFBZSxRQUFmLEVBQXlCLFFBQXpCLEVBQW1DLE1BQW5DLEVBQ0MsT0FERCxFQUNVLE9BRFYsRUFDbUIsS0FEbkIsRUFDMEIsTUFEMUIsQ0FBM0I7O0FBR0EsU0FBU0MsWUFBVCxDQUFzQkMsQ0FBdEIsRUFBaUNDLENBQWpDLEVBQXFEO0FBQ25EO0FBQ0E7QUFDQSxTQUFPQyxhQUFhRCxDQUFiLEVBQ0pFLEdBREksQ0FDQSxDQUFDLENBQUNDLE1BQUQsRUFBU0MsSUFBVCxDQUFELEtBQW9CLHVCQUFVRCxNQUFWLEVBQWtCLFFBQWxCLEtBQStCLDJCQUFjQSxNQUFkLE1BQTBCSixDQUQ3RSxFQUVKTSxTQUZJLENBRU0sS0FGTixDQUFQO0FBR0Q7O0FBRUQ7QUFDQSxTQUFTQyxlQUFULENBQXlCTixDQUF6QixFQUE2QztBQUMzQyxTQUFPTyxTQUFTUCxDQUFULEVBQ0pFLEdBREksQ0FDQU0sUUFBUSwwQkFBYUEsSUFBYixDQURSLEVBRUpILFNBRkksQ0FFTSxLQUZOLENBQVA7QUFHRDs7QUFFRCxTQUFTSSxVQUFULENBQW9CQyxFQUFwQixFQUFtQztBQUNqQyxNQUFJLENBQUMsMEJBQWFBLEVBQWIsS0FBb0IsdUJBQVVBLEVBQVYsQ0FBckIsS0FBdUNBLEdBQUdmLEtBQUgsSUFBWSxJQUF2RCxFQUE2RDtBQUMzRCxVQUFNZ0IsUUFBUUQsR0FBR2YsS0FBakIsQ0FEMkQsQ0FDbEM7QUFDekIsV0FBT0osT0FBT3FCLElBQVAsQ0FBWUMsS0FBS0EsTUFBTUYsS0FBdkIsQ0FBUDtBQUNEO0FBQ0QsU0FBTyxLQUFQO0FBQ0Q7O0FBRUQsU0FBU0csYUFBVCxDQUF1QmQsQ0FBdkIsRUFBMkM7QUFDekMsU0FBT08sU0FBU1AsQ0FBVCxFQUNKRSxHQURJLENBQ0FRLE1BQU07QUFDVCxXQUFPRCxXQUFXQyxFQUFYLENBQVA7QUFDRCxHQUhJLEVBR0ZMLFNBSEUsQ0FHUSxLQUhSLENBQVA7QUFJRDs7QUFFRCxTQUFTVSxtQkFBVCxDQUE2QkMsR0FBN0IsRUFBNkM7QUFDM0MsU0FBTyx1QkFBVUEsR0FBVixFQUFlbkIsa0JBQWYsQ0FBUDtBQUNEOztBQUVELFNBQVNvQixzQkFBVCxDQUFnQ2pCLENBQWhDLEVBQW9EO0FBQ2xELFNBQU9PLFNBQVNQLENBQVQsRUFDSkUsR0FESSxDQUNBYyxPQUFPO0FBQ1YsV0FBT0Qsb0JBQW9CQyxHQUFwQixDQUFQO0FBQ0QsR0FISSxFQUdGWCxTQUhFLENBR1EsS0FIUixDQUFQO0FBSUQ7O0FBRUQsU0FBU2EsVUFBVCxDQUFvQmxCLENBQXBCLEVBQXdDO0FBQ3RDLFNBQU9PLFNBQVNQLENBQVQsRUFDSkUsR0FESSxDQUNBaUIsU0FBUztBQUNaLFFBQUksMEJBQWFBLEtBQWIsRUFBb0IsR0FBcEIsQ0FBSixFQUE4QjtBQUM1QixhQUFPLElBQVA7QUFDRDtBQUNELFdBQU8sS0FBUDtBQUNELEdBTkksRUFNRmQsU0FORSxDQU1RLEtBTlIsQ0FBUDtBQU9EOztBQUVNLFNBQVNyRSxZQUFULENBQXNCK0QsQ0FBdEIsRUFBaUNxQixDQUFqQyxFQUE2Q3BCLENBQTdDLEVBQWlFO0FBQ3RFLE1BQUlBLEVBQUVxQixJQUFGLEtBQVcsQ0FBZixFQUFrQjtBQUNoQjtBQUNBLFdBQU9ELENBQVA7QUFDRCxHQUhELE1BR08sSUFBSUYsV0FBV2xCLENBQVgsQ0FBSixFQUFtQjtBQUN4QjtBQUNBLFdBQU9vQixDQUFQO0FBQ0QsR0FITSxNQUdBLElBQUlILHVCQUF1QmpCLENBQXZCLENBQUosRUFBK0I7QUFDcEM7QUFDQSxXQUFPLElBQVA7QUFDRCxHQUhNLE1BR0EsSUFBSWMsY0FBY2QsQ0FBZCxDQUFKLEVBQXNCO0FBQzNCO0FBQ0EsV0FBTyxJQUFQO0FBQ0QsR0FITSxNQUdBLElBQUlNLGdCQUFnQk4sQ0FBaEIsQ0FBSixFQUF3QjtBQUM3QjtBQUNBLFdBQU9vQixDQUFQO0FBQ0QsR0FITSxNQUdBLElBQUl0QixhQUFhQyxDQUFiLEVBQWdCQyxDQUFoQixDQUFKLEVBQXdCO0FBQzdCO0FBQ0E7QUFDQSxXQUFPLElBQVA7QUFDRDtBQUNELFNBQU8sS0FBUDtBQUNEOztBQUVELFNBQVNPLFFBQVQsQ0FBcUJQLENBQXJCLEVBQTJDO0FBQ3pDLE1BQUlBLEVBQUVxQixJQUFGLElBQVUsQ0FBZCxFQUFpQjtBQUNmLFdBQU8sb0JBQU1DLEVBQU4sQ0FBU3RCLEVBQUV1QixJQUFGLEVBQVQsQ0FBUDtBQUNEO0FBQ0QsU0FBTzdFLFNBQVA7QUFDRDs7QUFFRCxTQUFTOEUsc0JBQVQsQ0FBZ0NDLE1BQWhDLEVBQXlEO0FBQ3JEO0FBQ0YsU0FBT3hCLGFBQWF3QixNQUFiLEVBQ0p2QixHQURJLENBQ0EsQ0FBQyxDQUFDYyxHQUFELEVBQU1aLElBQU4sQ0FBRCxLQUFpQjtBQUNwQixRQUFJWCxvQkFBb0J1QixHQUFwQixDQUFKLEVBQThCO0FBQzVCLGFBQU8sb0JBQU1VLEtBQU4sQ0FBWSxJQUFaLEVBQWtCQyxPQUFPLENBQUMsMEJBQWFBLEdBQWIsRUFBa0IsR0FBbEIsQ0FBMUIsRUFBa0RwQixTQUFTSCxJQUFULENBQWxELENBQVA7QUFDRDtBQUNELFdBQU8sS0FBUDtBQUNELEdBTkksRUFNRkMsU0FORSxDQU1RLEtBTlIsQ0FBUDtBQU9EOztBQUVELFNBQVN1QixzQkFBVCxDQUFnQ0gsTUFBaEMsRUFBeUQ7QUFDdkQ7QUFDQSxTQUFPeEIsYUFBYXdCLE1BQWIsRUFDSkksS0FESSxDQUNFLENBQUMsQ0FBQ0MsS0FBRCxFQUFRMUIsSUFBUixDQUFELEtBQW1CLHNCQUFTMEIsS0FBVCxJQUFrQjdCLGFBQWFHLElBQWIsQ0FBbEIsR0FBdUMxRCxTQUQ1RCxFQUVKd0QsR0FGSSxDQUVBLENBQUMsQ0FBQ2MsR0FBRCxFQUFNWixJQUFOLENBQUQsS0FBaUI7QUFDcEIsUUFBSVgsb0JBQW9CdUIsR0FBcEIsQ0FBSixFQUE4QjtBQUM1QixhQUFPLG9CQUFNVSxLQUFOLENBQVksSUFBWixFQUFrQkMsT0FBTyxDQUFDLDBCQUFhQSxHQUFiLEVBQWtCLEdBQWxCLENBQTFCLEVBQWtEcEIsU0FBU0gsSUFBVCxDQUFsRCxDQUFQO0FBQ0Q7QUFDRCxXQUFPLEtBQVA7QUFDRCxHQVBJLEVBT0ZDLFNBUEUsQ0FPUSxLQVBSLENBQVA7QUFRRDs7QUFHRCxTQUFTSixZQUFULENBQXNCRCxDQUF0QixFQUErRTtBQUM3RSxNQUFJQSxFQUFFcUIsSUFBRixHQUFTLENBQWIsRUFBZ0I7QUFDZCxRQUFJRSxPQUFPdkIsRUFBRXVCLElBQUYsRUFBWDtBQUNBLFFBQUluQixPQUFPSixFQUFFK0IsR0FBRixFQUFYO0FBQ0EsV0FBTyxvQkFBTVQsRUFBTixDQUFTLENBQUNDLElBQUQsRUFBT25CLElBQVAsQ0FBVCxDQUFQO0FBQ0Q7QUFDRCxTQUFPMUQsU0FBUDtBQUNEOztBQUVELFNBQVNzRix1QkFBVCxDQUFpQ1AsTUFBakMsRUFBMERRLFdBQTFELEVBQWdGO0FBQzlFO0FBQ0EsU0FBT2hDLGFBQWF3QixNQUFiLEVBQ0pJLEtBREksQ0FDRSxDQUFDLENBQUNLLEtBQUQsRUFBUTlCLElBQVIsQ0FBRCxLQUFtQjtBQUN4QixRQUFJLHNCQUFTOEIsS0FBVCxDQUFKLEVBQXFCO0FBQ25CLGFBQU9qQyxhQUFhRyxJQUFiLENBQVA7QUFDRDtBQUNELFdBQU8xRCxTQUFQO0FBQ0QsR0FOSSxFQU9KbUYsS0FQSSxDQU9FLENBQUMsQ0FBQ0MsS0FBRCxFQUFRMUIsSUFBUixDQUFELEtBQW1CO0FBQ3hCLFFBQUksc0JBQVMwQixLQUFULENBQUosRUFBcUI7QUFDbkIsYUFBTzdCLGFBQWFHLElBQWIsQ0FBUDtBQUNEO0FBQ0QsV0FBTzFELFNBQVA7QUFDRCxHQVpJLEVBYUptRixLQWJJLENBYUUsQ0FBQyxDQUFDTSxRQUFELEVBQVcvQixJQUFYLENBQUQsS0FBc0I7QUFDM0IsUUFBSSwwQkFBYStCLFFBQWIsQ0FBSixFQUE0QjtBQUMxQixhQUFPbEMsYUFBYUcsSUFBYixDQUFQO0FBQ0Q7QUFDRCxXQUFPLG9CQUFNa0IsRUFBTixDQUFTLENBQUNhLFFBQUQsRUFBVy9CLElBQVgsQ0FBVCxDQUFQO0FBQ0QsR0FsQkksRUFtQkp5QixLQW5CSSxDQW1CRSxDQUFDLENBQUNPLEtBQUQsRUFBUWhDLElBQVIsQ0FBRCxLQUFtQjtBQUN4QixRQUFJLHVCQUFVZ0MsS0FBVixFQUFpQixVQUFqQixDQUFKLEVBQWtDO0FBQ2hDLFVBQUlyQyxJQUFJLDJCQUFjcUMsS0FBZCxDQUFSO0FBQ0EsVUFBSXJDLEtBQUssSUFBVCxFQUFlO0FBQ2IsY0FBTSxJQUFJc0MsS0FBSixDQUFVLDhCQUFWLENBQU47QUFDRDtBQUNELGFBQU8sb0JBQU1mLEVBQU4sQ0FBUyxDQUFDdEYsYUFBYStELENBQWIsRUFBZ0JrQyxXQUFoQixFQUE2QjdCLElBQTdCLENBQVYsQ0FBUDtBQUNEO0FBQ0QsV0FBTyxvQkFBTWtCLEVBQU4sQ0FBUyxLQUFULENBQVA7QUFDRCxHQTVCSSxFQTRCRmpCLFNBNUJFLENBNEJRLEtBNUJSLENBQVA7QUE2QkQ7O0FBRUQsU0FBU2lDLGtCQUFULENBQTRCYixNQUE1QixFQUFxRFEsV0FBckQsRUFBMkU7QUFDekU7QUFDQSxTQUFPaEMsYUFBYXdCLE1BQWIsRUFDSkksS0FESSxDQUNFLENBQUMsQ0FBQ1UsTUFBRCxFQUFTbkMsSUFBVCxDQUFELEtBQW9CO0FBQ3pCLFFBQUksc0JBQVNtQyxNQUFULENBQUosRUFBc0I7QUFDcEIsVUFBSXhDLElBQUksMkJBQWN3QyxNQUFkLENBQVI7QUFDQSxVQUFJeEMsS0FBSyxJQUFULEVBQWU7QUFDYixjQUFNLElBQUlzQyxLQUFKLENBQVUsOEJBQVYsQ0FBTjtBQUNEO0FBQ0QsYUFBTyxvQkFBTWYsRUFBTixDQUFTLENBQUN0RixhQUFhK0QsQ0FBYixFQUFnQmtDLFdBQWhCLEVBQTZCN0IsSUFBN0IsQ0FBVixDQUFQO0FBQ0Q7QUFDRCxXQUFPLG9CQUFNa0IsRUFBTixDQUFTLEtBQVQsQ0FBUDtBQUNELEdBVkksRUFVRmpCLFNBVkUsQ0FVUSxLQVZSLENBQVA7QUFXRDs7QUFFRCxTQUFTbUMsYUFBVCxDQUF1QmYsTUFBdkIsRUFBZ0Q7QUFDOUM7QUFDQSxTQUFPeEIsYUFBYXdCLE1BQWIsRUFDSkksS0FESSxDQUNFLENBQUMsQ0FBQ0ssS0FBRCxFQUFROUIsSUFBUixDQUFELEtBQW1CO0FBQ3hCLFFBQUksc0JBQVM4QixLQUFULENBQUosRUFBcUI7QUFDbkIsYUFBT2pDLGFBQWFHLElBQWIsQ0FBUDtBQUNEO0FBQ0QsV0FBTzFELFNBQVA7QUFDRCxHQU5JLEVBT0ptRixLQVBJLENBT0UsQ0FBQyxDQUFDQyxLQUFELEVBQVExQixJQUFSLENBQUQsS0FBbUI7QUFDeEIsUUFBSSxzQkFBUzBCLEtBQVQsQ0FBSixFQUFxQjtBQUNuQixhQUFPN0IsYUFBYUcsSUFBYixDQUFQO0FBQ0Q7QUFDRCxXQUFPMUQsU0FBUDtBQUNELEdBWkksRUFhSm1GLEtBYkksQ0FhRSxDQUFDLENBQUNNLFFBQUQsRUFBVy9CLElBQVgsQ0FBRCxLQUFzQjtBQUMzQixRQUFJLDBCQUFhK0IsUUFBYixDQUFKLEVBQTRCO0FBQzFCLGFBQU9sQyxhQUFhRyxJQUFiLENBQVA7QUFDRDtBQUNELFdBQU8sb0JBQU1rQixFQUFOLENBQVMsQ0FBQ2EsUUFBRCxFQUFXL0IsSUFBWCxDQUFULENBQVA7QUFDRCxHQWxCSSxFQW1CSnlCLEtBbkJJLENBbUJFLENBQUMsQ0FBQ08sS0FBRCxFQUFRaEMsSUFBUixDQUFELEtBQW1CO0FBQ3hCLFFBQUksdUJBQVVnQyxLQUFWLEVBQWlCLFVBQWpCLENBQUosRUFBa0M7QUFDaEMsYUFBTyxvQkFBTWQsRUFBTixDQUFTLElBQVQsQ0FBUDtBQUNEO0FBQ0QsV0FBTyxvQkFBTUEsRUFBTixDQUFTLEtBQVQsQ0FBUDtBQUNELEdBeEJJLEVBd0JGakIsU0F4QkUsQ0F3QlEsS0F4QlIsQ0FBUDtBQXlCRDs7QUFFTSxTQUFTcEUsYUFBVCxDQUF1QmdHLFdBQXZCLEVBQTZDUixNQUE3QyxFQUFzRTtBQUMzRSxNQUFJQSxPQUFPZ0IsT0FBUCxFQUFKLEVBQXNCO0FBQ3BCO0FBQ0EsV0FBTyxJQUFQO0FBQ0QsR0FIRCxNQUdPLElBQUluQyxnQkFBZ0JtQixNQUFoQixDQUFKLEVBQTZCO0FBQ2xDO0FBQ0EsV0FBTyxJQUFQO0FBQ0QsR0FITSxNQUdBLElBQUlELHVCQUF1QkMsTUFBdkIsQ0FBSixFQUFvQztBQUN6QztBQUNBLFdBQU8sSUFBUDtBQUNELEdBSE0sTUFHQSxJQUFJRyx1QkFBdUJILE1BQXZCLENBQUosRUFBb0M7QUFDekM7QUFDQSxXQUFPLElBQVA7QUFDRCxHQUhNLE1BR0EsSUFBSWUsY0FBY2YsTUFBZCxDQUFKLEVBQTJCO0FBQ2hDO0FBQ0EsV0FBT08sd0JBQXdCUCxNQUF4QixFQUFnQ1EsV0FBaEMsQ0FBUDtBQUNELEdBSE0sTUFHQSxJQUFJSyxtQkFBbUJiLE1BQW5CLEVBQTJCUSxXQUEzQixDQUFKLEVBQTZDO0FBQ2xEO0FBQ0EsV0FBTyxJQUFQO0FBQ0Q7QUFDRCxTQUFPLEtBQVA7QUFDRCIsImZpbGUiOiJ1dGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCB7IGlzRU9TIH0gZnJvbSAncmVhZHRhYmxlJztcbmltcG9ydCB7IExpc3QgfSBmcm9tICdpbW11dGFibGUnO1xuXG5pbXBvcnQgdHlwZSB7IFJlYWR0YWJsZSwgQ2hhclN0cmVhbSB9IGZyb20gJ3JlYWR0YWJsZSc7XG5cbmltcG9ydCB7IGNvZGUgIH0gZnJvbSAnZXN1dGlscyc7XG5pbXBvcnQgdHlwZSB7IFRva2VuVHJlZSB9IGZyb20gJy4uL3Rva2Vucyc7XG5pbXBvcnQgeyBnZXRMaW5lTnVtYmVyLCBpc1B1bmN0dWF0b3IsIGlzS2V5d29yZCwgaXNCcmFjZXMsIGlzUGFyZW5zLCBpc0lkZW50aWZpZXIgfSBmcm9tICcuLi90b2tlbnMnO1xuXG5jb25zdCB7IGlzTGluZVRlcm1pbmF0b3IsXG4gICAgICAgIGlzV2hpdGVTcGFjZSxcbiAgICAgICAgaXNEZWNpbWFsRGlnaXQsXG4gICAgICAgIGlzSWRlbnRpZmllclBhcnRFUzY6IGlzSWRlbnRpZmllclBhcnQsXG4gICAgICAgIGlzSWRlbnRpZmllclN0YXJ0RVM2OiBpc0lkZW50aWZpZXJTdGFydCB9ID0gY29kZTtcblxuaW1wb3J0ICogYXMgUiBmcm9tICdyYW1kYSc7XG5pbXBvcnQgeyBNYXliZSB9IGZyb20gJ3JhbWRhLWZhbnRhc3knO1xuY29uc3QgTm90aGluZyA9IE1heWJlLk5vdGhpbmc7XG5cbi8vIFRPRE86IGFsc28sIG5lZWQgdG8gaGFuZGxlIGNvbnRleHR1YWwgeWllbGRcbmNvbnN0IGxpdGVyYWxLZXl3b3JkcyA9IFsndGhpcycsICdudWxsJywgJ3RydWUnLCAnZmFsc2UnXTtcblxuZXhwb3J0IHsgaXNMaW5lVGVybWluYXRvciwgaXNXaGl0ZVNwYWNlLCBpc0RlY2ltYWxEaWdpdCwgaXNJZGVudGlmaWVyU3RhcnQsIGlzSWRlbnRpZmllclBhcnQgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEhleFZhbHVlKHJ1bmU6IHN0cmluZykge1xuICBpZiAoJzAnIDw9IHJ1bmUgJiYgcnVuZSA8PSAnOScpIHtcbiAgICByZXR1cm4gcnVuZS5jaGFyQ29kZUF0KDApIC0gNDg7XG4gIH1cbiAgaWYgKCdhJyA8PSBydW5lICYmIHJ1bmUgPD0gJ2YnKSB7XG4gICAgcmV0dXJuIHJ1bmUuY2hhckNvZGVBdCgwKSAtIDg3O1xuICB9XG4gIGlmICgnQScgPD0gcnVuZSAmJiBydW5lIDw9ICdGJykge1xuICAgIHJldHVybiBydW5lLmNoYXJDb2RlQXQoMCkgLSA1NTtcbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBza2lwU2luZ2xlTGluZUNvbW1lbnQoc3RyZWFtOiBDaGFyU3RyZWFtKTogdm9pZCB7XG4gIGxldCBpZHggPSAwO1xuICBsZXQgY2hhciA9IHN0cmVhbS5wZWVrKGlkeCk7XG4gIHdoaWxlICghaXNFT1MoY2hhcikpIHtcbiAgICBsZXQgY2hDb2RlID0gY2hhci5jaGFyQ29kZUF0KDApO1xuICAgIGlmIChpc0xpbmVUZXJtaW5hdG9yKGNoQ29kZSkpIHtcbiAgICAgICsraWR4O1xuICAgICAgaWYgKGNoQ29kZSA9PT0gMHhEIC8qIFwiXFxyXCIgKi8gJiYgc3RyZWFtLnBlZWsoaWR4KS5jaGFyQ29kZUF0KDApID09PSAweEEgLypcIlxcblwiICovKSB7XG4gICAgICAgICsraWR4O1xuICAgICAgfVxuICAgICAgdGhpcy5pbmNyZW1lbnRMaW5lKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytpZHg7XG4gICAgY2hhciA9IHN0cmVhbS5wZWVrKGlkeCk7XG4gIH1cbiAgc3RyZWFtLnJlYWRTdHJpbmcoaWR4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYW5Vbmljb2RlKHN0cmVhbTogQ2hhclN0cmVhbSwgc3RhcnQ6IG51bWJlcikge1xuICBjb25zdCBzUGVlayA9IHN0cmVhbS5wZWVrLmJpbmQoc3RyZWFtKTtcbiAgbGV0IGlkeCA9IHN0YXJ0O1xuICBsZXQgaGV4RGlnaXRzID0gMDtcbiAgaWYgKHNQZWVrKGlkeCkgPT09ICd7Jykge1xuICAgIC8vXFx1e0hleERpZ2l0c31cbiAgICArK2lkeDtcbiAgICBsZXQgY2hhciA9IHNQZWVrKGlkeCk7XG4gICAgd2hpbGUgKCFpc0VPUyhjaGFyKSkge1xuICAgICAgbGV0IGhleCA9IGdldEhleFZhbHVlKGNoYXIpO1xuICAgICAgaWYgKGhleCA9PT0gLTEpIGJyZWFrO1xuICAgICAgaGV4RGlnaXRzID0gKGhleERpZ2l0cyA8PCA0KSB8IGhleDtcbiAgICAgIGlmIChoZXhEaWdpdHMgPiAweDEwRkZGRikge1xuICAgICAgICB0aHJvdyB0aGlzLmNyZWF0ZUlMTEVHQUwoY2hhcik7XG4gICAgICB9XG4gICAgICBjaGFyID0gc1BlZWsoKytpZHgpO1xuICAgIH1cbiAgICBpZiAoY2hhciAhPT0gJ30nKSB7XG4gICAgICB0aHJvdyB0aGlzLmNyZWF0ZUlMTEVHQUwoY2hhcik7XG4gICAgfVxuICAgIGlmIChpZHggPT09IHN0YXJ0ICsgMSkge1xuICAgICAgdGhyb3cgdGhpcy5jcmVhdGVJTExFR0FMKHN0cmVhbS5wZWVrKGlkeCsxKSk7XG4gICAgfVxuICAgICsraWR4O1xuICB9IGVsc2Uge1xuICAgIC8vXFx1SGV4NERpZ2l0c1xuICAgIGlmIChpc0VPUyhzUGVlayhpZHggKyAzKSkpIHJldHVybiAtMTtcbiAgICBsZXQgcjtcbiAgICBmb3IgKDsgaWR4IDwgc3RhcnQgKyA0OyArK2lkeCkge1xuICAgICAgciA9IGdldEhleFZhbHVlKHNQZWVrKGlkeCkpO1xuICAgICAgaWYgKHIgPT09IC0xKSByZXR1cm4gLTE7XG4gICAgICBoZXhEaWdpdHMgPSAoaGV4RGlnaXRzIDw8IDQpIHwgcjtcbiAgICB9XG4gIH1cbiAgc3RyZWFtLnJlYWRTdHJpbmcoaWR4KTtcblxuICByZXR1cm4gaGV4RGlnaXRzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZFN0cmluZ0VzY2FwZShzdHI6IHN0cmluZywgc3RyZWFtOiBDaGFyU3RyZWFtLCBzdGFydDogbnVtYmVyLCBvY3RhbDogP3N0cmluZykge1xuICBsZXQgaWR4ID0gc3RhcnQgKyAxLFxuICAgICAgY2hhciA9IHN0cmVhbS5wZWVrKGlkeCksXG4gICAgICBsaW5lU3RhcnQ7XG4gIGlmIChpc0VPUyhjaGFyKSkgdGhyb3cgdGhpcy5jcmVhdGVJTExFR0FMKGNoYXIpO1xuXG4gIGlmICghaXNMaW5lVGVybWluYXRvcihjaGFyLmNoYXJDb2RlQXQoMCkpKSB7XG4gICAgc3dpdGNoIChjaGFyKSB7XG4gICAgICBjYXNlICdiJzogc3RyICs9ICdcXGInOyArK2lkeDsgYnJlYWs7XG4gICAgICBjYXNlICdmJzogc3RyICs9ICdcXGYnOyArK2lkeDsgYnJlYWs7XG4gICAgICBjYXNlICduJzogc3RyICs9ICdcXG4nOyArK2lkeDsgYnJlYWs7XG4gICAgICBjYXNlICdyJzogc3RyICs9ICdcXHInOyArK2lkeDsgYnJlYWs7XG4gICAgICBjYXNlICd0Jzogc3RyICs9ICdcXHQnOyArK2lkeDsgYnJlYWs7XG4gICAgICBjYXNlICd2Jzogc3RyICs9ICdcXHUwMDBCJzsgKytpZHg7IGJyZWFrO1xuICAgICAgY2FzZSAndSc6XG4gICAgICBjYXNlICd4Jzoge1xuICAgICAgICBsZXQgdW5lc2NhcGVkO1xuICAgICAgICArK2lkeDtcbiAgICAgICAgbGV0IG54dCA9IHN0cmVhbS5wZWVrKGlkeCk7XG4gICAgICAgIGlmIChpc0VPUyhueHQpKSB7XG4gICAgICAgICAgdGhyb3cgdGhpcy5jcmVhdGVJTExFR0FMKG54dCk7XG4gICAgICAgIH1cbiAgICAgICAgdW5lc2NhcGVkID0gY2hhciA9PT0gJ3UnID8gc2NhblVuaWNvZGUuY2FsbCh0aGlzLCBzdHJlYW0sIGlkeCkgOiBzY2FuSGV4RXNjYXBlMi5jYWxsKHRoaXMsIHN0cmVhbSk7XG4gICAgICAgIGlmICh1bmVzY2FwZWQgPT09IC0xKSB0aHJvdyB0aGlzLmNyZWF0ZUlMTEVHQUwoY2hhcik7XG4gICAgICAgIGlkeCA9IDA7IC8vIHN0cmVhbSBpcyByZWFkIGluIHNjYW5Vbmljb2RlIGFuZCBzY2FuSGV4RXNjYXBlMlxuXG4gICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNvZGVQb2ludCh1bmVzY2FwZWQpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgaWYgKCcwJyA8PSBjaGFyICYmIGNoYXIgPD0gJzcnKSB7XG4gICAgICAgICAgW3N0ciwgaWR4LCBvY3RhbF0gPSBzY2FuT2N0YWwuY2FsbCh0aGlzLCBzdHIsIHN0cmVhbSwgY2hhciwgaWR4LCBvY3RhbCk7XG4gICAgICAgIH0gZWxzZSBpZihjaGFyID09PSAnOCcgfHwgY2hhciA9PT0gJzknKSB7XG4gICAgICAgICAgdGhyb3cgdGhpcy5jcmVhdGVJTExFR0FMKGNoYXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciArPSBjaGFyO1xuICAgICAgICAgICsraWR4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChjaGFyID09PSAnXFxyJyAmJiBzdHJlYW0ucGVlayhpZHggKyAxKSA9PT0gJ1xcbicpIHtcbiAgICAgICsraWR4O1xuICAgIH1cbiAgICArK2lkeDtcbiAgICB0aGlzLmluY3JlbWVudExpbmUoKTtcbiAgICBsaW5lU3RhcnQgPSBpZHg7XG4gIH1cbiAgcmV0dXJuIFtzdHIsIGlkeCwgb2N0YWwsIGxpbmVTdGFydF07XG59XG5cbmZ1bmN0aW9uIHNjYW5PY3RhbChzdHIsIHN0cmVhbSwgY2hhciwgc3RhcnQsIG9jdGFsKSB7XG4gIGxldCBsZW4gPSAxLCBpZHggPSBzdGFydDtcbiAgaWYgKCcwJyA8PSBjaGFyICYmIGNoYXIgPD0gJzMnKSB7XG4gICAgbGVuID0gMDtcbiAgfVxuICBsZXQgY29kZSA9IDA7XG5cbiAgd2hpbGUgKGxlbiA8IDMgJiYgJzAnIDw9IGNoYXIgJiYgY2hhciA8PSAnNycpIHtcbiAgICArK2lkeDtcbiAgICBpZiAobGVuID4gMCB8fCBjaGFyICE9PSAnMCcpIHtcbiAgICAgIGlmIChvY3RhbCA9PSBudWxsKSBvY3RhbCA9ICcnO1xuICAgICAgb2N0YWwgKz0gY2hhcjtcbiAgICB9XG4gICAgY29kZSAqPSA4O1xuICAgIGNvZGUgKz0gK2NoYXI7IC8vY29lcnNpb25cbiAgICArK2xlbjtcbiAgICBjaGFyID0gc3RyZWFtLnBlZWsoaWR4KTtcbiAgICBpZiAoaXNFT1MoY2hhcikpIHtcbiAgICAgIHRocm93IHRoaXMuY3JlYXRlSUxMRUdBTChjaGFyKTtcbiAgICB9XG4gIH1cbiAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gIHJldHVybiBbc3RyLCBpZHgsIG9jdGFsXTtcbn1cblxuZnVuY3Rpb24gc2NhbkhleEVzY2FwZTIoc3RyZWFtLCBpZHgpIHtcbiAgbGV0IGNoYXIgPSBzdHJlYW0ucGVlayhpZHgpO1xuXG4gIGlmIChpc0VPUyhjaGFyKSkgcmV0dXJuIC0xO1xuXG4gIGxldCByMSA9IGdldEhleFZhbHVlKHN0cmVhbS5wZWVrKCkpO1xuICBpZiAocjEgPT09IC0xKSByZXR1cm4gcjE7XG5cbiAgbGV0IHIyID0gZ2V0SGV4VmFsdWUoc3RyZWFtLnBlZWsoMSkpO1xuICBpZiAocjIgPT09IC0xKSByZXR1cm4gcjI7XG5cbiAgc3RyZWFtLnJlYWRTdHJpbmcoMik7XG4gIHJldHVybiByMSA8PCA0IHwgcjI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnNlcnRTZXF1ZW5jZShjb2xsOiBPYmplY3QsIHNlcTogc3RyaW5nKSB7XG4gIGNvbnN0IGNoYXIgPSBzZXFbMF07XG4gIGlmICghY29sbFtjaGFyXSkge1xuICAgIGNvbGxbY2hhcl0gPSB7fTtcbiAgfVxuICBpZiAoc2VxLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbGxbY2hhcl0uaXNWYWx1ZSA9IHRydWU7XG4gICAgcmV0dXJuIGNvbGw7XG4gIH0gZWxzZSB7XG4gICAgY29sbFtjaGFyXSA9IGluc2VydFNlcXVlbmNlKGNvbGxbY2hhcl0sIHNlcS5zbGljZSgxKSk7XG4gICAgcmV0dXJuIGNvbGw7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGlzVGVybWluYXRpbmcgPSAodGFibGU6IFJlYWR0YWJsZSkgPT4gKGNoYXI6IHN0cmluZyk6IGJvb2xlYW4gPT4gdGFibGUuZ2V0TWFwcGluZyhjaGFyKS5tb2RlID09PSAndGVybWluYXRpbmcnO1xuXG4vLyBjaGVjayBmb3IgdGVybWluYXRpbmcgZG9lc24ndCB3b3JrIGlmIGl0J3MgYXQgdGhlIHN0YXJ0XG5leHBvcnQgZnVuY3Rpb24gcmV0cmlldmVTZXF1ZW5jZUxlbmd0aCh0YWJsZTogT2JqZWN0LCBzdHJlYW06IENoYXJTdHJlYW0sIGlkeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgY29uc3QgY2hhciA9IHN0cmVhbS5wZWVrKGlkeCk7XG4gIGlmICghdGFibGVbY2hhcl0pIHtcbiAgICBpZiAodGFibGUuaXNWYWx1ZSkgcmV0dXJuIGlkeDtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJldHJpZXZlU2VxdWVuY2VMZW5ndGgodGFibGVbY2hhcl0sIHN0cmVhbSwgKytpZHgpO1xuICB9XG59XG5cbmNvbnN0IGFzc2lnbk9wcyA9ICBbJz0nLCAnKz0nLCAnLT0nLCAnKj0nLCAnLz0nLCAnJT0nLCAnPDw9JywgJz4+PScsICc+Pj49JyxcbiAgICAgICAgICAgICAgICAgICcmPScsICd8PScsICdePScsICcsJ107XG5cbmNvbnN0IGJpbmFyeU9wcyA9IFsnKycsICctJywgJyonLCAnLycsICclJywnPDwnLCAnPj4nLCAnPj4+JywgJyYnLCAnfCcsICdeJyxcbiAgICAgICAgICAgICAgICAgJyYmJywgJ3x8JywgJz8nLCAnOicsXG4gICAgICAgICAgICAgICAgICc9PT0nLCAnPT0nLCAnPj0nLCAnPD0nLCAnPCcsICc+JywgJyE9JywgJyE9PScsICdpbnN0YW5jZW9mJ107XG5cbmNvbnN0IHVuYXJ5T3BzID0gWycrKycsICctLScsICd+JywgJyEnLCAnZGVsZXRlJywgJ3ZvaWQnLCAndHlwZW9mJywgJ3lpZWxkJywgJ3Rocm93JywgJ25ldyddO1xuXG5jb25zdCBhbGxPcHMgPSBhc3NpZ25PcHMuY29uY2F0KGJpbmFyeU9wcykuY29uY2F0KHVuYXJ5T3BzKTtcblxuZnVuY3Rpb24gaXNOb25MaXRlcmFsS2V5d29yZCh0OiBUb2tlblRyZWUpIHtcbiAgcmV0dXJuIGlzS2V5d29yZCh0KSAmJiB0LnZhbHVlICYmICFSLmNvbnRhaW5zKHQudmFsdWUsIGxpdGVyYWxLZXl3b3Jkcyk7XG59XG5jb25zdCBleHByUHJlZml4S2V5d29yZHMgPSBbJ2luc3RhbmNlb2YnLCAndHlwZW9mJywgJ2RlbGV0ZScsICd2b2lkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneWllbGQnLCAndGhyb3cnLCAnbmV3JywgJ2Nhc2UnXTtcblxuZnVuY3Rpb24gaXNFeHByUmV0dXJuKGw6IG51bWJlciwgcDogTGlzdDxUb2tlblRyZWU+KSB7XG4gIC8vIC4uLiByZXR1cm4ge3g6IDQyfSAvciAvaVxuICAvLyAuLi4gcmV0dXJuXFxue3g6IDQyfSAvciAvaVxuICByZXR1cm4gcG9wUmVzdE1heWJlKHApXG4gICAgLm1hcCgoW3JldEt3ZCwgcmVzdF0pID0+IGlzS2V5d29yZChyZXRLd2QsICdyZXR1cm4nKSAmJiBnZXRMaW5lTnVtYmVyKHJldEt3ZCkgPT09IGwpXG4gICAgLmdldE9yRWxzZShmYWxzZSk7XG59XG5cbi8vIExpc3QgYSAtPiBCb29sZWFuXG5mdW5jdGlvbiBpc1RvcFB1bmN0dWF0b3IocDogTGlzdDxUb2tlblRyZWU+KSB7XG4gIHJldHVybiBwb3BNYXliZShwKVxuICAgIC5tYXAocHVuYyA9PiBpc1B1bmN0dWF0b3IocHVuYykpXG4gICAgLmdldE9yRWxzZShmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGlzT3BlcmF0b3Iob3A6IFRva2VuVHJlZSkge1xuICBpZiAoKGlzUHVuY3R1YXRvcihvcCkgfHwgaXNLZXl3b3JkKG9wKSkgJiYgb3AudmFsdWUgIT0gbnVsbCkge1xuICAgIGNvbnN0IG9wVmFsID0gb3AudmFsdWU7ICAvLyB0aGUgY29uc3QgaXMgYmVjYXVzZSBmbG93IGRvZXNuJ3Qga25vdyBvcC52YWx1ZSBpc24ndCBtdXRhdGVkXG4gICAgcmV0dXJuIGFsbE9wcy5zb21lKG8gPT4gbyA9PT0gb3BWYWwpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNUb3BPcGVyYXRvcihwOiBMaXN0PFRva2VuVHJlZT4pIHtcbiAgcmV0dXJuIHBvcE1heWJlKHApXG4gICAgLm1hcChvcCA9PiB7XG4gICAgICByZXR1cm4gaXNPcGVyYXRvcihvcCk7XG4gICAgfSkuZ2V0T3JFbHNlKGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gaXNFeHByUHJlZml4S2V5d29yZChrd2Q6IFRva2VuVHJlZSkge1xuICByZXR1cm4gaXNLZXl3b3JkKGt3ZCwgZXhwclByZWZpeEtleXdvcmRzKTtcbn1cblxuZnVuY3Rpb24gaXNUb3BLZXl3b3JkRXhwclByZWZpeChwOiBMaXN0PFRva2VuVHJlZT4pIHtcbiAgcmV0dXJuIHBvcE1heWJlKHApXG4gICAgLm1hcChrd2QgPT4ge1xuICAgICAgcmV0dXJuIGlzRXhwclByZWZpeEtleXdvcmQoa3dkKTtcbiAgICB9KS5nZXRPckVsc2UoZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBpc1RvcENvbG9uKHA6IExpc3Q8VG9rZW5UcmVlPikge1xuICByZXR1cm4gcG9wTWF5YmUocClcbiAgICAubWFwKGNvbG9uID0+IHtcbiAgICAgIGlmIChpc1B1bmN0dWF0b3IoY29sb24sICc6JykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSkuZ2V0T3JFbHNlKGZhbHNlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRXhwclByZWZpeChsOiBudW1iZXIsIGI6IGJvb2xlYW4sIHA6IExpc3Q8VG9rZW5UcmVlPikge1xuICBpZiAocC5zaXplID09PSAwKSB7XG4gICAgLy8gLi4uICh7eDogNDJ9IC9yL2kpXG4gICAgcmV0dXJuIGI7XG4gIH0gZWxzZSBpZiAoaXNUb3BDb2xvbihwKSkge1xuICAgIC8vIC4uLiAoe3g6IHt4OiA0Mn0gL3IvaSB9KVxuICAgIHJldHVybiBiO1xuICB9IGVsc2UgaWYgKGlzVG9wS2V5d29yZEV4cHJQcmVmaXgocCkpIHtcbiAgICAvLyAuLi4gdGhyb3cge3g6IDQyfSAvci9pXG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNUb3BPcGVyYXRvcihwKSkge1xuICAgIC8vIC4uLiA0MiArIHt4OiA0Mn0gL3IvaVxuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVG9wUHVuY3R1YXRvcihwKSkge1xuICAgIC8vIC4uLiBmb3IgKCA7IHt4OiA0Mn0vci9pKVxuICAgIHJldHVybiBiO1xuICB9IGVsc2UgaWYgKGlzRXhwclJldHVybihsLCBwKSkge1xuICAgIC8vIC4uLiByZXR1cm4ge3g6IDQyfSAvciAvaVxuICAgIC8vIC4uLiByZXR1cm5cXG57eDogNDJ9IC9yIC9pXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBwb3BNYXliZTxUPihwOiBMaXN0PFQ+KTogTWF5YmU8VD4ge1xuICBpZiAocC5zaXplID49IDEpIHtcbiAgICByZXR1cm4gTWF5YmUub2YocC5sYXN0KCkpO1xuICB9XG4gIHJldHVybiBOb3RoaW5nKCk7XG59XG5cbmZ1bmN0aW9uIGlzVG9wU3RhbmRhbG9uZUtleXdvcmQocHJlZml4OiBMaXN0PFRva2VuVHJlZT4pIHtcbiAgICAvLyBQIC4gdCAuIHQnICB3aGVyZSB0IFxcbm90ID0gXCIuXCIgYW5kIHQnIOKIiCAoS2V5d29yZCBcXHNldG1pbnVzICBMaXRlcmFsS2V5d29yZClcbiAgcmV0dXJuIHBvcFJlc3RNYXliZShwcmVmaXgpXG4gICAgLm1hcCgoW2t3ZCwgcmVzdF0pID0+IHtcbiAgICAgIGlmIChpc05vbkxpdGVyYWxLZXl3b3JkKGt3ZCkpIHtcbiAgICAgICAgcmV0dXJuIE1heWJlLm1heWJlKHRydWUsIGRvdCA9PiAhaXNQdW5jdHVhdG9yKGRvdCwgJy4nKSwgcG9wTWF5YmUocmVzdCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pLmdldE9yRWxzZShmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGlzVG9wUGFyZW5zV2l0aEtleXdvcmQocHJlZml4OiBMaXN0PFRva2VuVHJlZT4pIHtcbiAgLy8gUCAuIHQgLiB0JyAuIChUKSAgd2hlcmUgdCBcXG5vdCA9IFwiLlwiIGFuZCB0JyDiiIggKEtleXdvcmQgXFxzZXRtaW51cyBMaXRlcmFsS2V5d29yZClcbiAgcmV0dXJuIHBvcFJlc3RNYXliZShwcmVmaXgpXG4gICAgLmNoYWluKChbcGFyZW4sIHJlc3RdKSA9PiBpc1BhcmVucyhwYXJlbikgPyBwb3BSZXN0TWF5YmUocmVzdCkgOiBOb3RoaW5nKCkpXG4gICAgLm1hcCgoW2t3ZCwgcmVzdF0pID0+IHtcbiAgICAgIGlmIChpc05vbkxpdGVyYWxLZXl3b3JkKGt3ZCkpIHtcbiAgICAgICAgcmV0dXJuIE1heWJlLm1heWJlKHRydWUsIGRvdCA9PiAhaXNQdW5jdHVhdG9yKGRvdCwgJy4nKSwgcG9wTWF5YmUocmVzdCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pLmdldE9yRWxzZShmYWxzZSk7XG59XG5cblxuZnVuY3Rpb24gcG9wUmVzdE1heWJlKHA6IExpc3Q8VG9rZW5UcmVlPik6IE1heWJlPFtUb2tlblRyZWUsIExpc3Q8VG9rZW5UcmVlPl0+IHtcbiAgaWYgKHAuc2l6ZSA+IDApIHtcbiAgICBsZXQgbGFzdCA9IHAubGFzdCgpO1xuICAgIGxldCByZXN0ID0gcC5wb3AoKTtcbiAgICByZXR1cm4gTWF5YmUub2YoW2xhc3QsIHJlc3RdKTtcbiAgfVxuICByZXR1cm4gTm90aGluZygpO1xufVxuXG5mdW5jdGlvbiBpc1RvcEZ1bmN0aW9uRXhwcmVzc2lvbihwcmVmaXg6IExpc3Q8VG9rZW5UcmVlPiwgZXhwckFsbG93ZWQ6IGJvb2xlYW4pIHtcbiAgLy8gUCAuIGZ1bmN0aW9uXmwgLiB4PyAuICgpIC4ge30gICAgIHdoZXJlIGlzRXhwclByZWZpeChQLCBiLCBsKSA9IGZhbHNlXG4gIHJldHVybiBwb3BSZXN0TWF5YmUocHJlZml4KVxuICAgIC5jaGFpbigoW2N1cmx5LCByZXN0XSkgPT4ge1xuICAgICAgaWYgKGlzQnJhY2VzKGN1cmx5KSkge1xuICAgICAgICByZXR1cm4gcG9wUmVzdE1heWJlKHJlc3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE5vdGhpbmcoKTtcbiAgICB9KVxuICAgIC5jaGFpbigoW3BhcmVuLCByZXN0XSkgPT4ge1xuICAgICAgaWYgKGlzUGFyZW5zKHBhcmVuKSkge1xuICAgICAgICByZXR1cm4gcG9wUmVzdE1heWJlKHJlc3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE5vdGhpbmcoKTtcbiAgICB9KVxuICAgIC5jaGFpbigoW29wdElkZW50LCByZXN0XSkgPT4ge1xuICAgICAgaWYgKGlzSWRlbnRpZmllcihvcHRJZGVudCkpIHtcbiAgICAgICAgcmV0dXJuIHBvcFJlc3RNYXliZShyZXN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBNYXliZS5vZihbb3B0SWRlbnQsIHJlc3RdKTtcbiAgICB9KVxuICAgIC5jaGFpbigoW2ZuS3dkLCByZXN0XSkgPT4ge1xuICAgICAgaWYgKGlzS2V5d29yZChmbkt3ZCwgJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgbGV0IGwgPSBnZXRMaW5lTnVtYmVyKGZuS3dkKTtcbiAgICAgICAgaWYgKGwgPT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW4tZXhwZWN0ZWQgbnVsbCBsaW5lIG51bWJlcicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBNYXliZS5vZighaXNFeHByUHJlZml4KGwsIGV4cHJBbGxvd2VkLCByZXN0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gTWF5YmUub2YoZmFsc2UpO1xuICAgIH0pLmdldE9yRWxzZShmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGlzVG9wT2JqZWN0TGl0ZXJhbChwcmVmaXg6IExpc3Q8VG9rZW5UcmVlPiwgZXhwckFsbG93ZWQ6IGJvb2xlYW4pIHtcbiAgLy8gUCAuIHtUfV5sICB3aGVyZSBpc0V4cHJQcmVmaXgoUCwgYiwgbCkgPSBmYWxzZVxuICByZXR1cm4gcG9wUmVzdE1heWJlKHByZWZpeClcbiAgICAuY2hhaW4oKFticmFjZXMsIHJlc3RdKSA9PiB7XG4gICAgICBpZiAoaXNCcmFjZXMoYnJhY2VzKSkge1xuICAgICAgICBsZXQgbCA9IGdldExpbmVOdW1iZXIoYnJhY2VzKTtcbiAgICAgICAgaWYgKGwgPT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW4tZXhwZWN0ZWQgbnVsbCBsaW5lIG51bWJlcicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBNYXliZS5vZighaXNFeHByUHJlZml4KGwsIGV4cHJBbGxvd2VkLCByZXN0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gTWF5YmUub2YoZmFsc2UpO1xuICAgIH0pLmdldE9yRWxzZShmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGlzVG9wRnVuY3Rpb24ocHJlZml4OiBMaXN0PFRva2VuVHJlZT4pIHtcbiAgLy8gUCAuIGZ1bmN0aW9uXmwgLiB4PyAuICgpIC4ge30gICAgIHdoZXJlIGlzRXhwclByZWZpeChQLCBiLCBsKSA9IGZhbHNlXG4gIHJldHVybiBwb3BSZXN0TWF5YmUocHJlZml4KVxuICAgIC5jaGFpbigoW2N1cmx5LCByZXN0XSkgPT4ge1xuICAgICAgaWYgKGlzQnJhY2VzKGN1cmx5KSkge1xuICAgICAgICByZXR1cm4gcG9wUmVzdE1heWJlKHJlc3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE5vdGhpbmcoKTtcbiAgICB9KVxuICAgIC5jaGFpbigoW3BhcmVuLCByZXN0XSkgPT4ge1xuICAgICAgaWYgKGlzUGFyZW5zKHBhcmVuKSkge1xuICAgICAgICByZXR1cm4gcG9wUmVzdE1heWJlKHJlc3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE5vdGhpbmcoKTtcbiAgICB9KVxuICAgIC5jaGFpbigoW29wdElkZW50LCByZXN0XSkgPT4ge1xuICAgICAgaWYgKGlzSWRlbnRpZmllcihvcHRJZGVudCkpIHtcbiAgICAgICAgcmV0dXJuIHBvcFJlc3RNYXliZShyZXN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBNYXliZS5vZihbb3B0SWRlbnQsIHJlc3RdKTtcbiAgICB9KVxuICAgIC5jaGFpbigoW2ZuS3dkLCByZXN0XSkgPT4ge1xuICAgICAgaWYgKGlzS2V5d29yZChmbkt3ZCwgJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgcmV0dXJuIE1heWJlLm9mKHRydWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE1heWJlLm9mKGZhbHNlKTtcbiAgICB9KS5nZXRPckVsc2UoZmFsc2UpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNSZWdleFByZWZpeChleHByQWxsb3dlZDogYm9vbGVhbiwgcHJlZml4OiBMaXN0PFRva2VuVHJlZT4pIHtcbiAgaWYgKHByZWZpeC5pc0VtcHR5KCkpIHtcbiAgICAvLyDOtVxuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVG9wUHVuY3R1YXRvcihwcmVmaXgpKSB7XG4gICAgLy8gUCAuIHQgICB3aGVyZSB0IOKIiCBQdW5jdHVhdG9yXG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNUb3BTdGFuZGFsb25lS2V5d29yZChwcmVmaXgpKSB7XG4gICAgLy8gUCAuIHQgLiB0JyAgd2hlcmUgdCBcXG5vdCA9IFwiLlwiIGFuZCB0JyDiiIggKEtleXdvcmQgXFxzZXRtaW51cyAgTGl0ZXJhbEtleXdvcmQpXG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNUb3BQYXJlbnNXaXRoS2V5d29yZChwcmVmaXgpKSB7XG4gICAgLy8gUCAuIHQgLiB0JyAuIChUKSAgd2hlcmUgdCBcXG5vdCA9IFwiLlwiIGFuZCB0JyDiiIggKEtleXdvcmQgXFxzZXRtaW51cyBMaXRlcmFsS2V5d29yZClcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc1RvcEZ1bmN0aW9uKHByZWZpeCkpIHtcbiAgICAvLyBQIC4gZnVuY3Rpb25ebCAuIHg/IC4gKCkgLiB7fSAgICAgd2hlcmUgaXNFeHByUHJlZml4KFAsIGIsIGwpID0gZmFsc2VcbiAgICByZXR1cm4gaXNUb3BGdW5jdGlvbkV4cHJlc3Npb24ocHJlZml4LCBleHByQWxsb3dlZCk7XG4gIH0gZWxzZSBpZiAoaXNUb3BPYmplY3RMaXRlcmFsKHByZWZpeCwgZXhwckFsbG93ZWQpKSB7XG4gICAgLy8gUCAuIHtUfV5sICB3aGVyZSBpc0V4cHJQcmVmaXgoUCwgYiwgbCkgPSBmYWxzZVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbiJdfQ==