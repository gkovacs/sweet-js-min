'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSlice = getSlice;
exports.default = read;

var _readtable = require('readtable');

var _defaultReadtable = require('./default-readtable');

var _defaultReadtable2 = _interopRequireDefault(_defaultReadtable);

var _immutable = require('immutable');

var _tokens = require('../tokens');

var _syntax = require('../syntax');

var _syntax2 = _interopRequireDefault(_syntax);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _readtable.setCurrentReadtable)(_defaultReadtable2.default);

function getSlice(stream, startLocation) {
  return {
    text: stream.getSlice(startLocation.position),
    start: startLocation.position,
    startLocation,
    end: stream.sourceInfo.position
  };
}

const streams = new WeakMap();

class ReadError extends Error {
  constructor({ index, line, column, message }) {
    super(message);
    this.index = index;
    this.line = line;
    this.column = column;
    this.message = `[${ line }:${ column }] ${ message }`;
  }
}

class TokenReader extends _readtable.Reader {
  constructor(stream, context) {
    super();
    this.context = context;
    streams.set(this, stream);
    this.locationInfo = {
      line: 1,
      column: 1
    };
  }

  createError(msg) {
    let message = msg.replace(/\{(\d+)\}/g, (_, n) => JSON.stringify(arguments[+n + 1]));
    // $FlowFixMe: decide on how to handle possible nullability
    return new ReadError({ message, index: streams.get(this).sourceInfo.position, line: this.locationInfo.line, column: this.locationInfo.column });
  }

  createILLEGAL(char) {
    return !(0, _readtable.isEOS)(char) ? this.createError('Unexpected {0}', char) : this.createError('Unexpected end of input');
  }

  readToken(stream, ...rest) {
    const startLocation = Object.assign({}, this.locationInfo, stream.sourceInfo);
    const result = super.read(stream, ...rest);

    if (startLocation.column === this.locationInfo.column && startLocation.line === this.locationInfo.line) {
      this.locationInfo.column += stream.sourceInfo.position - startLocation.position;
    }

    if (result === _tokens.EmptyToken) return result;

    if (!_immutable.List.isList(result)) result.slice = getSlice(stream, startLocation);

    return new _syntax2.default(result, this.context);
  }

  readUntil(close, stream, results, exprAllowed) {
    let result,
        done = false;
    do {
      if ((0, _readtable.isEOS)(stream.peek())) break;
      done = typeof close === 'function' ? close() : stream.peek() === close;
      result = this.readToken(stream, results, exprAllowed);

      if (result !== _tokens.EmptyToken) {
        results = results.push(result);
      }
    } while (!done);
    return results;
  }

  incrementLine() {
    this.locationInfo.line += 1;
    this.locationInfo.column = 1;
  }
}

function read(source, context) {
  const stream = typeof source === 'string' ? new _readtable.CharStream(source) : source;
  if ((0, _readtable.isEOS)(stream.peek())) return (0, _immutable.List)();
  return new TokenReader(stream, context).readUntil(null, stream, (0, _immutable.List)(), false);
}
//# sourceMappingURL=data:application/json;base64,