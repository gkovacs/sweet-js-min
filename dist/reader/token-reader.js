'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSlice = getSlice;
exports.default = read;

var _readtable = require('readtable');

var _defaultReadtable = require('./default-readtable');

var _defaultReadtable2 = _interopRequireDefault(_defaultReadtable);

var _immutable = require('immutable');

var _tokens = require('../tokens');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _readtable.setCurrentReadtable)(_defaultReadtable2.default);

function getSlice(stream, startLocation) {
  return {
    text: stream.getSlice(startLocation.position),
    start: startLocation.position,
    startLocation,
    end: stream.sourceInfo.position
  };
}

const streams = new WeakMap();

class ReadError extends Error {
  constructor({ index, line, column, message }) {
    super(message);
    this.index = index;
    this.line = line;
    this.column = column;
    this.message = `[${ line }:${ column }] ${ message }`;
  }
}

class TokenReader extends _readtable.Reader {
  constructor(stream, context) {
    super();
    this.context = context;
    streams.set(this, stream);
    this.locationInfo = {
      line: 1,
      column: 1
    };
  }

  createError(msg) {
    let message = msg.replace(/\{(\d+)\}/g, (_, n) => JSON.stringify(arguments[+n + 1]));
    // $FlowFixMe: decide on how to handle possible nullability
    return new ReadError({ message, index: streams.get(this).sourceInfo.position, line: this.locationInfo.line, column: this.locationInfo.column });
  }

  createILLEGAL(char) {
    return !(0, _readtable.isEOS)(char) ? this.createError('Unexpected {0}', char) : this.createError('Unexpected end of input');
  }

  readToken(stream, ...rest) {
    const startLocation = Object.assign({}, this.locationInfo, stream.sourceInfo);
    const result = super.read(stream, ...rest);

    if (startLocation.column === this.locationInfo.column && startLocation.line === this.locationInfo.line) {
      this.locationInfo.column += stream.sourceInfo.position - startLocation.position;
    }

    if (result === _tokens.EmptyToken) return result;

    if (!_immutable.List.isList(result)) result.slice = getSlice(stream, startLocation);

    return result;
  }

  readUntil(close, stream, prefix, exprAllowed) {
    let result,
        results = prefix,
        done = false;
    do {
      if ((0, _readtable.isEOS)(stream.peek())) break;
      done = typeof close === 'function' ? close() : stream.peek() === close;
      result = this.readToken(stream, results, exprAllowed);

      if (result !== _tokens.EmptyToken) {
        results = results.push(result);
      }
    } while (!done);
    return results;
  }

  incrementLine() {
    this.locationInfo.line += 1;
    this.locationInfo.column = 1;
  }
}

function read(source, context) {
  const stream = typeof source === 'string' ? new _readtable.CharStream(source) : source;
  if ((0, _readtable.isEOS)(stream.peek())) return (0, _immutable.List)();
  return new TokenReader(stream, context).readUntil(null, stream, (0, _immutable.List)(), false);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yZWFkZXIvdG9rZW4tcmVhZGVyLmpzIl0sIm5hbWVzIjpbImdldFNsaWNlIiwicmVhZCIsInN0cmVhbSIsInN0YXJ0TG9jYXRpb24iLCJ0ZXh0IiwicG9zaXRpb24iLCJzdGFydCIsImVuZCIsInNvdXJjZUluZm8iLCJzdHJlYW1zIiwiV2Vha01hcCIsIlJlYWRFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJpbmRleCIsImxpbmUiLCJjb2x1bW4iLCJtZXNzYWdlIiwiVG9rZW5SZWFkZXIiLCJjb250ZXh0Iiwic2V0IiwibG9jYXRpb25JbmZvIiwiY3JlYXRlRXJyb3IiLCJtc2ciLCJyZXBsYWNlIiwiXyIsIm4iLCJKU09OIiwic3RyaW5naWZ5IiwiYXJndW1lbnRzIiwiZ2V0IiwiY3JlYXRlSUxMRUdBTCIsImNoYXIiLCJyZWFkVG9rZW4iLCJyZXN0IiwiT2JqZWN0IiwiYXNzaWduIiwicmVzdWx0IiwiaXNMaXN0Iiwic2xpY2UiLCJyZWFkVW50aWwiLCJjbG9zZSIsInByZWZpeCIsImV4cHJBbGxvd2VkIiwicmVzdWx0cyIsImRvbmUiLCJwZWVrIiwicHVzaCIsImluY3JlbWVudExpbmUiLCJzb3VyY2UiXSwibWFwcGluZ3MiOiI7Ozs7O1FBcUJnQkEsUSxHQUFBQSxRO2tCQXNGUUMsSTs7QUF6R3hCOztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFJQTs7QUFZTyxTQUFTRCxRQUFULENBQWtCRSxNQUFsQixFQUFzQ0MsYUFBdEMsRUFBMkU7QUFDaEYsU0FBTztBQUNMQyxVQUFNRixPQUFPRixRQUFQLENBQWdCRyxjQUFjRSxRQUE5QixDQUREO0FBRUxDLFdBQU9ILGNBQWNFLFFBRmhCO0FBR0xGLGlCQUhLO0FBSUxJLFNBQUtMLE9BQU9NLFVBQVAsQ0FBa0JIO0FBSmxCLEdBQVA7QUFNRDs7QUFFRCxNQUFNSSxVQUFVLElBQUlDLE9BQUosRUFBaEI7O0FBRUEsTUFBTUMsU0FBTixTQUF3QkMsS0FBeEIsQ0FBOEI7QUFLNUJD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LENBQVQ7O0FBRUEsVUFBSU4sNkJBQUosRUFBMkI7QUFDekJPLGtCQUFVQSxRQUFRRyxJQUFSLENBQWFWLE1BQWIsQ0FBVjtBQUNEO0FBQ0YsS0FSRCxRQVFRLENBQUNRLElBUlQ7QUFTQSxXQUFPRCxPQUFQO0FBQ0Q7O0FBRURJLGtCQUFzQjtBQUNwQixTQUFLM0IsWUFBTCxDQUFrQk4sSUFBbEIsSUFBMEIsQ0FBMUI7QUFDQSxTQUFLTSxZQUFMLENBQWtCTCxNQUFsQixHQUEyQixDQUEzQjtBQUNEO0FBMUQ4Qjs7QUE2RGxCLFNBQVNmLElBQVQsQ0FBY2dELE1BQWQsRUFBMkM5QixPQUEzQyxFQUF5RTtBQUN0RixRQUFNakIsU0FBVSxPQUFPK0MsTUFBUCxLQUFrQixRQUFuQixHQUErQiwwQkFBZUEsTUFBZixDQUEvQixHQUF3REEsTUFBdkU7QUFDQSxNQUFJLHNCQUFNL0MsT0FBTzRDLElBQVAsRUFBTixDQUFKLEVBQTBCLE9BQU8sc0JBQVA7QUFDMUIsU0FBTyxJQUFJNUIsV0FBSixDQUFnQmhCLE1BQWhCLEVBQXdCaUIsT0FBeEIsRUFBaUNxQixTQUFqQyxDQUEyQyxJQUEzQyxFQUFpRHRDLE1BQWpELEVBQXlELHNCQUF6RCxFQUFpRSxLQUFqRSxDQUFQO0FBQ0QiLCJmaWxlIjoidG9rZW4tcmVhZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IHsgQ2hhclN0cmVhbSwgaXNFT1MsIFJlYWRlciwgc2V0Q3VycmVudFJlYWR0YWJsZSB9IGZyb20gJ3JlYWR0YWJsZSc7XG5pbXBvcnQgZGVmYXVsdFJlYWR0YWJsZSBmcm9tICcuL2RlZmF1bHQtcmVhZHRhYmxlJztcbmltcG9ydCB7IExpc3QgfSBmcm9tICdpbW11dGFibGUnO1xuaW1wb3J0IHsgRW1wdHlUb2tlbiB9IGZyb20gJy4uL3Rva2Vucyc7XG5cbmltcG9ydCB0eXBlIHsgU3RhcnRMb2NhdGlvbiwgU2xpY2UgfSBmcm9tICcuLi90b2tlbnMnO1xuXG5zZXRDdXJyZW50UmVhZHRhYmxlKGRlZmF1bHRSZWFkdGFibGUpO1xuXG5leHBvcnQgdHlwZSBMb2NhdGlvbkluZm8gPSB7XG4gIGxpbmU6IG51bWJlcixcbiAgY29sdW1uOiBudW1iZXJcbn07XG5cbnR5cGUgQ29udGV4dCA9IHtcbiAgYmluZGluZ3M6IGFueSxcbiAgc2NvcGVzZXRzOiBhbnlcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTbGljZShzdHJlYW06IENoYXJTdHJlYW0sIHN0YXJ0TG9jYXRpb246IFN0YXJ0TG9jYXRpb24pOiBTbGljZSB7XG4gIHJldHVybiB7XG4gICAgdGV4dDogc3RyZWFtLmdldFNsaWNlKHN0YXJ0TG9jYXRpb24ucG9zaXRpb24pLFxuICAgIHN0YXJ0OiBzdGFydExvY2F0aW9uLnBvc2l0aW9uLFxuICAgIHN0YXJ0TG9jYXRpb24sXG4gICAgZW5kOiBzdHJlYW0uc291cmNlSW5mby5wb3NpdGlvblxuICB9O1xufVxuXG5jb25zdCBzdHJlYW1zID0gbmV3IFdlYWtNYXAoKTtcblxuY2xhc3MgUmVhZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBpbmRleDogbnVtYmVyO1xuICBsaW5lOiBudW1iZXI7XG4gIGNvbHVtbjogbnVtYmVyO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKHsgaW5kZXgsIGxpbmUsIGNvbHVtbiwgbWVzc2FnZSB9OiB7IGluZGV4OiBudW1iZXIsIGxpbmU6IG51bWJlciwgY29sdW1uOiBudW1iZXIsIG1lc3NhZ2U6IHN0cmluZyB9KSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgIHRoaXMubGluZSA9IGxpbmU7XG4gICAgdGhpcy5jb2x1bW4gPSBjb2x1bW47XG4gICAgdGhpcy5tZXNzYWdlID0gYFske2xpbmV9OiR7Y29sdW1ufV0gJHttZXNzYWdlfWA7XG4gIH1cbn1cblxuY2xhc3MgVG9rZW5SZWFkZXIgZXh0ZW5kcyBSZWFkZXIge1xuICBsb2NhdGlvbkluZm86IExvY2F0aW9uSW5mbztcbiAgY29udGV4dDogP0NvbnRleHQ7XG4gIGNvbnN0cnVjdG9yKHN0cmVhbTogQ2hhclN0cmVhbSwgY29udGV4dD86IENvbnRleHQpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgc3RyZWFtcy5zZXQodGhpcywgc3RyZWFtKTtcbiAgICB0aGlzLmxvY2F0aW9uSW5mbyA9IHtcbiAgICAgIGxpbmU6IDEsXG4gICAgICBjb2x1bW46IDFcbiAgICB9O1xuICB9XG5cbiAgY3JlYXRlRXJyb3IobXNnOiBzdHJpbmcpOiBSZWFkRXJyb3Ige1xuICAgIGxldCBtZXNzYWdlID0gbXNnLnJlcGxhY2UoL1xceyhcXGQrKVxcfS9nLCAoXywgbikgPT4gSlNPTi5zdHJpbmdpZnkoYXJndW1lbnRzWytuICsgMV0pKTtcbiAgICAvLyAkRmxvd0ZpeE1lOiBkZWNpZGUgb24gaG93IHRvIGhhbmRsZSBwb3NzaWJsZSBudWxsYWJpbGl0eVxuICAgIHJldHVybiBuZXcgUmVhZEVycm9yKHsgbWVzc2FnZSwgaW5kZXg6IHN0cmVhbXMuZ2V0KHRoaXMpLnNvdXJjZUluZm8ucG9zaXRpb24sIGxpbmU6IHRoaXMubG9jYXRpb25JbmZvLmxpbmUsIGNvbHVtbjogdGhpcy5sb2NhdGlvbkluZm8uY29sdW1uIH0pO1xuICB9XG5cbiAgY3JlYXRlSUxMRUdBTChjaGFyKSB7XG4gICAgcmV0dXJuICFpc0VPUyhjaGFyKVxuICAgICAgPyB0aGlzLmNyZWF0ZUVycm9yKCdVbmV4cGVjdGVkIHswfScsIGNoYXIpXG4gICAgOiB0aGlzLmNyZWF0ZUVycm9yKCdVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dCcpO1xuICB9XG5cbiAgcmVhZFRva2VuKHN0cmVhbTogQ2hhclN0cmVhbSwgLi4ucmVzdDogQXJyYXk8YW55Pikge1xuICAgIGNvbnN0IHN0YXJ0TG9jYXRpb24gPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmxvY2F0aW9uSW5mbywgc3RyZWFtLnNvdXJjZUluZm8pO1xuICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLnJlYWQoc3RyZWFtLCAuLi5yZXN0KTtcblxuXG4gICAgaWYgKHN0YXJ0TG9jYXRpb24uY29sdW1uID09PSB0aGlzLmxvY2F0aW9uSW5mby5jb2x1bW4gJiYgc3RhcnRMb2NhdGlvbi5saW5lID09PSB0aGlzLmxvY2F0aW9uSW5mby5saW5lKSB7XG4gICAgICB0aGlzLmxvY2F0aW9uSW5mby5jb2x1bW4gKz0gc3RyZWFtLnNvdXJjZUluZm8ucG9zaXRpb24gLSBzdGFydExvY2F0aW9uLnBvc2l0aW9uO1xuICAgIH1cblxuICAgIGlmIChyZXN1bHQgPT09IEVtcHR5VG9rZW4pIHJldHVybiByZXN1bHQ7XG5cbiAgICBpZiAoIUxpc3QuaXNMaXN0KHJlc3VsdCkpIHJlc3VsdC5zbGljZSA9IGdldFNsaWNlKHN0cmVhbSwgc3RhcnRMb2NhdGlvbik7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmVhZFVudGlsKGNsb3NlOiA/RnVuY3Rpb24gfCA/c3RyaW5nLCBzdHJlYW06IENoYXJTdHJlYW0sIHByZWZpeDogTGlzdDxhbnk+LCBleHByQWxsb3dlZDogYm9vbGVhbik6IExpc3Q8YW55PiB7XG4gICAgbGV0IHJlc3VsdCwgcmVzdWx0cyA9IHByZWZpeCwgZG9uZSA9IGZhbHNlO1xuICAgIGRvIHtcbiAgICAgIGlmIChpc0VPUyhzdHJlYW0ucGVlaygpKSkgYnJlYWs7XG4gICAgICBkb25lID0gdHlwZW9mIGNsb3NlID09PSAnZnVuY3Rpb24nID8gY2xvc2UoKSA6IHN0cmVhbS5wZWVrKCkgPT09IGNsb3NlO1xuICAgICAgcmVzdWx0ID0gdGhpcy5yZWFkVG9rZW4oc3RyZWFtLCByZXN1bHRzLCBleHByQWxsb3dlZCk7XG5cbiAgICAgIGlmIChyZXN1bHQgIT09IEVtcHR5VG9rZW4pIHtcbiAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgfVxuICAgIH0gd2hpbGUoIWRvbmUpO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG5cbiAgaW5jcmVtZW50TGluZSgpOiB2b2lkIHtcbiAgICB0aGlzLmxvY2F0aW9uSW5mby5saW5lICs9IDE7XG4gICAgdGhpcy5sb2NhdGlvbkluZm8uY29sdW1uID0gMTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWFkKHNvdXJjZTogc3RyaW5nIHwgQ2hhclN0cmVhbSwgY29udGV4dD86IENvbnRleHQpOiBMaXN0PGFueT4ge1xuICBjb25zdCBzdHJlYW0gPSAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycpID8gbmV3IENoYXJTdHJlYW0oc291cmNlKSA6IHNvdXJjZTtcbiAgaWYgKGlzRU9TKHN0cmVhbS5wZWVrKCkpKSByZXR1cm4gTGlzdCgpO1xuICByZXR1cm4gbmV3IFRva2VuUmVhZGVyKHN0cmVhbSwgY29udGV4dCkucmVhZFVudGlsKG51bGwsIHN0cmVhbSwgTGlzdCgpLCBmYWxzZSk7XG59XG4iXX0=