'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = readNumericLiteral;

var _readtable = require('readtable');

var _esutils = require('esutils');

var _utils = require('./utils');

var _tokens = require('../tokens');

const { isIdentifierPartES6: isIdentifierPart,
  isIdentifierStartES6: isIdentifierStart } = _esutils.code;

let terminates;

function readNumericLiteral(stream) {
  terminates = (0, _utils.isTerminating)((0, _readtable.getCurrentReadtable)());
  let idx = 0,
      char = stream.peek();

  if (char === '0') {
    char = stream.peek(++idx);
    if (!(0, _readtable.isEOS)(char)) {
      char = char.toLowerCase();
      switch (char) {
        case 'x':
          return readHexLiteral.call(this, stream);
        case 'b':
          return readBinaryLiteral.call(this, stream);
        case 'o':
          return readOctalLiteral.call(this, stream);
        default:
          if (isDecimalChar(char)) {
            return readLegacyOctalLiteral.call(this, stream); // reads legacy octal and decimal
          }
      }
    } else {
      return new _tokens.NumericToken({
        value: +stream.readString()
      });
    }
  } else if (char !== '.') {
    while (!terminates(char) && isDecimalChar(char)) {
      char = stream.peek(++idx);
    }
    if ((0, _readtable.isEOS)(char)) {
      return new _tokens.NumericToken({
        value: +stream.readString(idx)
      });
    }
  }

  idx = addDecimalLiteralSuffixLength.call(this, stream, idx);

  char = stream.peek(idx);
  if (!(0, _readtable.isEOS)(char) && !terminates(char) && isIdentifierStart(char)) {
    throw this.createILLEGAL(char);
  }

  return new _tokens.NumericToken({
    value: +stream.readString(idx)
  });
}

function addDecimalLiteralSuffixLength(stream, idx) {
  let char = stream.peek(idx);
  if (char === '.') {
    char = stream.peek(++idx);
    if ((0, _readtable.isEOS)(char)) return idx;

    while (isDecimalChar(char)) {
      char = stream.peek(++idx);
      if (terminates(char) || (0, _readtable.isEOS)(char)) return idx;
    }
  }

  if (char.toLowerCase() === 'e') {
    char = stream.peek(++idx);
    if ((0, _readtable.isEOS)(char)) throw this.createILLEGAL(char);

    if (char === '+' || char === '-') {
      char = stream.peek(++idx);
      if ((0, _readtable.isEOS)(char)) throw this.createILLEGAL(char);
    }

    while (isDecimalChar(char)) {
      char = stream.peek(++idx);
      if (terminates(char) || (0, _readtable.isEOS)(char)) break;
    }
  }
  return idx;
}

function readLegacyOctalLiteral(stream) {
  let idx = 0,
      isOctal = true,
      char = stream.peek();

  while (!terminates(char) && !(0, _readtable.isEOS)(char)) {
    if ('0' <= char && char <= '7') {
      idx++;
    } else if (char === '8' || char === '9') {
      isOctal = false;
      idx++;
    } else if (isIdentifierPart(char.charCodeAt(0))) {
      throw this.createILLEGAL(char);
    } else {
      break;
    }

    char = stream.peek(idx);
  }

  if (!isOctal) return new _tokens.NumericToken({
    value: parseNumeric(stream, idx, 10),
    octal: true,
    noctal: !isOctal
  });

  return new _tokens.NumericToken({
    value: parseNumeric(stream, idx, 8),
    octal: true,
    noctal: !isOctal
  });
}

function readOctalLiteral(stream) {
  let start,
      idx = start = 2,
      char = stream.peek(idx);
  while (!terminates(char) && !(0, _readtable.isEOS)(char)) {
    if ('0' <= char && char <= '7') {
      char = stream.peek(++idx);
    } else if (isIdentifierPart(char.charCodeAt(0))) {
      throw this.createILLEGAL(char);
    } else {
      break;
    }
  }

  if (idx === start) {
    throw this.createILLEGAL(char);
  }

  return new _tokens.NumericToken({
    value: parseNumeric(stream, idx, 8, start)
  });
}

function readBinaryLiteral(stream) {
  let start,
      idx = start = 2;
  let char = stream.peek(idx);

  while (!terminates(char) && !(0, _readtable.isEOS)(char)) {
    if (char !== '0' && char !== '1') {
      break;
    }
    char = stream.peek(idx);
    idx++;
  }

  if (idx === start) {
    throw this.createILLEGAL(char);
  }

  if (!(0, _readtable.isEOS)(char) && !terminates(char) && (isIdentifierStart(char) || isDecimalChar(char))) {
    throw this.createILLEGAL(char);
  }

  return new _tokens.NumericToken({
    value: parseNumeric(stream, idx, 2, start)
  });
}

function readHexLiteral(stream) {
  let start,
      idx = start = 2,
      char = stream.peek(idx);
  while (!terminates(char)) {
    let hex = (0, _utils.getHexValue)(char);
    if (hex === -1) {
      break;
    }
    char = stream.peek(++idx);
  }

  if (idx === start) {
    throw this.createILLEGAL(char);
  }

  if (!(0, _readtable.isEOS)(char) && !terminates(char) && isIdentifierStart(char)) {
    throw this.createILLEGAL(char);
  }

  return new _tokens.NumericToken({
    value: parseNumeric(stream, idx, 16, start)
  });
}

function parseNumeric(stream, len, radix, start = 0) {
  stream.readString(start);
  return parseInt(stream.readString(len - start), radix);
}

function isDecimalChar(char) {
  return '0' <= char && char <= '9';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yZWFkZXIvcmVhZC1udW1lcmljLmpzIl0sIm5hbWVzIjpbInJlYWROdW1lcmljTGl0ZXJhbCIsImlzSWRlbnRpZmllclBhcnRFUzYiLCJpc0lkZW50aWZpZXJQYXJ0IiwiaXNJZGVudGlmaWVyU3RhcnRFUzYiLCJpc0lkZW50aWZpZXJTdGFydCIsInRlcm1pbmF0ZXMiLCJzdHJlYW0iLCJpZHgiLCJjaGFyIiwicGVlayIsInRvTG93ZXJDYXNlIiwicmVhZEhleExpdGVyYWwiLCJjYWxsIiwicmVhZEJpbmFyeUxpdGVyYWwiLCJyZWFkT2N0YWxMaXRlcmFsIiwiaXNEZWNpbWFsQ2hhciIsInJlYWRMZWdhY3lPY3RhbExpdGVyYWwiLCJ2YWx1ZSIsInJlYWRTdHJpbmciLCJhZGREZWNpbWFsTGl0ZXJhbFN1ZmZpeExlbmd0aCIsImNyZWF0ZUlMTEVHQUwiLCJpc09jdGFsIiwiY2hhckNvZGVBdCIsInBhcnNlTnVtZXJpYyIsIm9jdGFsIiwibm9jdGFsIiwic3RhcnQiLCJoZXgiLCJsZW4iLCJyYWRpeCIsInBhcnNlSW50Il0sIm1hcHBpbmdzIjoiOzs7OztrQkFjd0JBLGtCOztBQVp4Qjs7QUFDQTs7QUFDQTs7QUFDQTs7QUFJQSxNQUFNLEVBQUVDLHFCQUFxQkMsZ0JBQXZCO0FBQ0VDLHdCQUFzQkMsaUJBRHhCLGtCQUFOOztBQUdBLElBQUlDLFVBQUo7O0FBRWUsU0FBU0wsa0JBQVQsQ0FBNEJNLE1BQTVCLEVBQWdEO0FBQzdERCxlQUFhLDBCQUFjLHFDQUFkLENBQWI7QUFDQSxNQUFJRSxNQUFNLENBQVY7QUFBQSxNQUFhQyxPQUFPRixPQUFPRyxJQUFQLEVBQXBCOztBQUVBLE1BQUlELFNBQVMsR0FBYixFQUFrQjtBQUNoQkEsV0FBT0YsT0FBT0csSUFBUCxDQUFZLEVBQUVGLEdBQWQsQ0FBUDtBQUNBLFFBQUksQ0FBQyxzQkFBTUMsSUFBTixDQUFMLEVBQWtCO0FBQ2hCQSxhQUFPQSxLQUFLRSxXQUFMLEVBQVA7QUFDQSxjQUFRRixJQUFSO0FBQ0UsYUFBSyxHQUFMO0FBQVUsaUJBQU9HLGVBQWVDLElBQWYsQ0FBb0IsSUFBcEIsRUFBMEJOLE1BQTFCLENBQVA7QUFDVixhQUFLLEdBQUw7QUFBVSxpQkFBT08sa0JBQWtCRCxJQUFsQixDQUF1QixJQUF2QixFQUE2Qk4sTUFBN0IsQ0FBUDtBQUNWLGFBQUssR0FBTDtBQUFVLGlCQUFPUSxpQkFBaUJGLElBQWpCLENBQXNCLElBQXRCLEVBQTRCTixNQUE1QixDQUFQO0FBQ1Y7QUFBUyxjQUFJUyxjQUFjUCxJQUFkLENBQUosRUFBeUI7QUFDaEMsbUJBQU9RLHVCQUF1QkosSUFBdkIsQ0FBNEIsSUFBNUIsRUFBa0NOLE1BQWxDLENBQVAsQ0FEZ0MsQ0FDa0I7QUFDbkQ7QUFOSDtBQVFELEtBVkQsTUFVTztBQUNMLGFBQU8seUJBQWlCO0FBQ3RCVyxlQUFPLENBQUNYLE9BQU9ZLFVBQVA7QUFEYyxPQUFqQixDQUFQO0FBR0Q7QUFDRixHQWpCRCxNQWlCTyxJQUFJVixTQUFTLEdBQWIsRUFBa0I7QUFDdkIsV0FBTyxDQUFDSCxXQUFXRyxJQUFYLENBQUQsSUFBcUJPLGNBQWNQLElBQWQsQ0FBNUIsRUFBaUQ7QUFDL0NBLGFBQU9GLE9BQU9HLElBQVAsQ0FBWSxFQUFFRixHQUFkLENBQVA7QUFDRDtBQUNELFFBQUksc0JBQU1DLElBQU4sQ0FBSixFQUFpQjtBQUNmLGFBQU8seUJBQWlCO0FBQ3RCUyxlQUFPLENBQUNYLE9BQU9ZLFVBQVAsQ0FBa0JYLEdBQWxCO0FBRGMsT0FBakIsQ0FBUDtBQUdEO0FBQ0Y7O0FBRURBLFFBQU1ZLDhCQUE4QlAsSUFBOUIsQ0FBbUMsSUFBbkMsRUFBeUNOLE1BQXpDLEVBQWlEQyxHQUFqRCxDQUFOOztBQUVBQyxTQUFPRixPQUFPRyxJQUFQLENBQVlGLEdBQVosQ0FBUDtBQUNBLE1BQUksQ0FBQyxzQkFBTUMsSUFBTixDQUFELElBQWdCLENBQUNILFdBQVdHLElBQVgsQ0FBakIsSUFBcUNKLGtCQUFrQkksSUFBbEIsQ0FBekMsRUFBa0U7QUFDaEUsVUFBTSxLQUFLWSxhQUFMLENBQW1CWixJQUFuQixDQUFOO0FBQ0Q7O0FBRUQsU0FBTyx5QkFBaUI7QUFDdEJTLFdBQU8sQ0FBQ1gsT0FBT1ksVUFBUCxDQUFrQlgsR0FBbEI7QUFEYyxHQUFqQixDQUFQO0FBR0Q7O0FBRUQsU0FBU1ksNkJBQVQsQ0FBdUNiLE1BQXZDLEVBQStDQyxHQUEvQyxFQUFvRDtBQUNsRCxNQUFJQyxPQUFPRixPQUFPRyxJQUFQLENBQVlGLEdBQVosQ0FBWDtBQUNBLE1BQUlDLFNBQVMsR0FBYixFQUFrQjtBQUNoQkEsV0FBT0YsT0FBT0csSUFBUCxDQUFZLEVBQUVGLEdBQWQsQ0FBUDtBQUNBLFFBQUksc0JBQU1DLElBQU4sQ0FBSixFQUFpQixPQUFPRCxHQUFQOztBQUVqQixXQUFPUSxjQUFjUCxJQUFkLENBQVAsRUFBNEI7QUFDMUJBLGFBQU9GLE9BQU9HLElBQVAsQ0FBWSxFQUFFRixHQUFkLENBQVA7QUFDQSxVQUFJRixXQUFXRyxJQUFYLEtBQW9CLHNCQUFNQSxJQUFOLENBQXhCLEVBQXFDLE9BQU9ELEdBQVA7QUFDdEM7QUFDRjs7QUFFRCxNQUFJQyxLQUFLRSxXQUFMLE9BQXVCLEdBQTNCLEVBQWdDO0FBQzlCRixXQUFPRixPQUFPRyxJQUFQLENBQVksRUFBRUYsR0FBZCxDQUFQO0FBQ0EsUUFBSSxzQkFBTUMsSUFBTixDQUFKLEVBQWlCLE1BQU0sS0FBS1ksYUFBTCxDQUFtQlosSUFBbkIsQ0FBTjs7QUFFakIsUUFBSUEsU0FBUyxHQUFULElBQWdCQSxTQUFTLEdBQTdCLEVBQWtDO0FBQ2hDQSxhQUFPRixPQUFPRyxJQUFQLENBQVksRUFBRUYsR0FBZCxDQUFQO0FBQ0EsVUFBSSxzQkFBTUMsSUFBTixDQUFKLEVBQWlCLE1BQU0sS0FBS1ksYUFBTCxDQUFtQlosSUFBbkIsQ0FBTjtBQUNsQjs7QUFFRCxXQUFPTyxjQUFjUCxJQUFkLENBQVAsRUFBNEI7QUFDMUJBLGFBQU9GLE9BQU9HLElBQVAsQ0FBWSxFQUFFRixHQUFkLENBQVA7QUFDQSxVQUFJRixXQUFXRyxJQUFYLEtBQW9CLHNCQUFNQSxJQUFOLENBQXhCLEVBQXFDO0FBQ3RDO0FBQ0Y7QUFDRCxTQUFPRCxHQUFQO0FBQ0Q7O0FBRUQsU0FBU1Msc0JBQVQsQ0FBZ0NWLE1BQWhDLEVBQXdDO0FBQ3RDLE1BQUlDLE1BQU0sQ0FBVjtBQUFBLE1BQWFjLFVBQVUsSUFBdkI7QUFBQSxNQUE2QmIsT0FBT0YsT0FBT0csSUFBUCxFQUFwQzs7QUFFQSxTQUFPLENBQUNKLFdBQVdHLElBQVgsQ0FBRCxJQUFxQixDQUFDLHNCQUFNQSxJQUFOLENBQTdCLEVBQTBDO0FBQ3hDLFFBQUksT0FBT0EsSUFBUCxJQUFlQSxRQUFRLEdBQTNCLEVBQWdDO0FBQzlCRDtBQUNELEtBRkQsTUFFTyxJQUFJQyxTQUFTLEdBQVQsSUFBZ0JBLFNBQVMsR0FBN0IsRUFBa0M7QUFDdkNhLGdCQUFVLEtBQVY7QUFDQWQ7QUFDRCxLQUhNLE1BR0EsSUFBSUwsaUJBQWlCTSxLQUFLYyxVQUFMLENBQWdCLENBQWhCLENBQWpCLENBQUosRUFBMEM7QUFDL0MsWUFBTSxLQUFLRixhQUFMLENBQW1CWixJQUFuQixDQUFOO0FBQ0QsS0FGTSxNQUVBO0FBQ0w7QUFDRDs7QUFFREEsV0FBT0YsT0FBT0csSUFBUCxDQUFZRixHQUFaLENBQVA7QUFDRDs7QUFFRCxNQUFJLENBQUNjLE9BQUwsRUFBYyxPQUFPLHlCQUFpQjtBQUNwQ0osV0FBT00sYUFBYWpCLE1BQWIsRUFBcUJDLEdBQXJCLEVBQTBCLEVBQTFCLENBRDZCO0FBRXBDaUIsV0FBTyxJQUY2QjtBQUdwQ0MsWUFBUSxDQUFDSjtBQUgyQixHQUFqQixDQUFQOztBQU1kLFNBQU8seUJBQWlCO0FBQ3RCSixXQUFPTSxhQUFhakIsTUFBYixFQUFxQkMsR0FBckIsRUFBMEIsQ0FBMUIsQ0FEZTtBQUV0QmlCLFdBQU8sSUFGZTtBQUd0QkMsWUFBUSxDQUFDSjtBQUhhLEdBQWpCLENBQVA7QUFLRDs7QUFFRCxTQUFTUCxnQkFBVCxDQUEwQlIsTUFBMUIsRUFBa0M7QUFDaEMsTUFBSW9CLEtBQUo7QUFBQSxNQUFXbkIsTUFBTW1CLFFBQVEsQ0FBekI7QUFBQSxNQUE0QmxCLE9BQU9GLE9BQU9HLElBQVAsQ0FBWUYsR0FBWixDQUFuQztBQUNBLFNBQU8sQ0FBQ0YsV0FBV0csSUFBWCxDQUFELElBQXFCLENBQUMsc0JBQU1BLElBQU4sQ0FBN0IsRUFBMEM7QUFDeEMsUUFBSSxPQUFPQSxJQUFQLElBQWVBLFFBQVEsR0FBM0IsRUFBZ0M7QUFDOUJBLGFBQU9GLE9BQU9HLElBQVAsQ0FBWSxFQUFFRixHQUFkLENBQVA7QUFDRCxLQUZELE1BRU8sSUFBSUwsaUJBQWlCTSxLQUFLYyxVQUFMLENBQWdCLENBQWhCLENBQWpCLENBQUosRUFBMEM7QUFDL0MsWUFBTSxLQUFLRixhQUFMLENBQW1CWixJQUFuQixDQUFOO0FBQ0QsS0FGTSxNQUVBO0FBQ0w7QUFDRDtBQUNGOztBQUVELE1BQUlELFFBQVFtQixLQUFaLEVBQW1CO0FBQ2pCLFVBQU0sS0FBS04sYUFBTCxDQUFtQlosSUFBbkIsQ0FBTjtBQUNEOztBQUVELFNBQU8seUJBQWlCO0FBQ3RCUyxXQUFPTSxhQUFhakIsTUFBYixFQUFxQkMsR0FBckIsRUFBMEIsQ0FBMUIsRUFBNkJtQixLQUE3QjtBQURlLEdBQWpCLENBQVA7QUFHRDs7QUFFRCxTQUFTYixpQkFBVCxDQUEyQlAsTUFBM0IsRUFBbUM7QUFDakMsTUFBSW9CLEtBQUo7QUFBQSxNQUFXbkIsTUFBTW1CLFFBQVEsQ0FBekI7QUFDQSxNQUFJbEIsT0FBT0YsT0FBT0csSUFBUCxDQUFZRixHQUFaLENBQVg7O0FBRUEsU0FBTSxDQUFDRixXQUFXRyxJQUFYLENBQUQsSUFBcUIsQ0FBQyxzQkFBTUEsSUFBTixDQUE1QixFQUF5QztBQUN2QyxRQUFJQSxTQUFTLEdBQVQsSUFBZ0JBLFNBQVMsR0FBN0IsRUFBa0M7QUFDaEM7QUFDRDtBQUNEQSxXQUFPRixPQUFPRyxJQUFQLENBQVlGLEdBQVosQ0FBUDtBQUNBQTtBQUNEOztBQUVELE1BQUlBLFFBQVFtQixLQUFaLEVBQW1CO0FBQ2pCLFVBQU0sS0FBS04sYUFBTCxDQUFtQlosSUFBbkIsQ0FBTjtBQUNEOztBQUVELE1BQUksQ0FBQyxzQkFBTUEsSUFBTixDQUFELElBQWdCLENBQUNILFdBQVdHLElBQVgsQ0FBakIsS0FBc0NKLGtCQUFrQkksSUFBbEIsS0FBMkJPLGNBQWNQLElBQWQsQ0FBakUsQ0FBSixFQUEyRjtBQUN6RixVQUFNLEtBQUtZLGFBQUwsQ0FBbUJaLElBQW5CLENBQU47QUFDRDs7QUFFRCxTQUFPLHlCQUFpQjtBQUN0QlMsV0FBT00sYUFBYWpCLE1BQWIsRUFBcUJDLEdBQXJCLEVBQTBCLENBQTFCLEVBQTZCbUIsS0FBN0I7QUFEZSxHQUFqQixDQUFQO0FBR0Q7O0FBRUQsU0FBU2YsY0FBVCxDQUF3QkwsTUFBeEIsRUFBZ0M7QUFDOUIsTUFBSW9CLEtBQUo7QUFBQSxNQUFXbkIsTUFBTW1CLFFBQVEsQ0FBekI7QUFBQSxNQUE0QmxCLE9BQU9GLE9BQU9HLElBQVAsQ0FBWUYsR0FBWixDQUFuQztBQUNBLFNBQU0sQ0FBQ0YsV0FBV0csSUFBWCxDQUFQLEVBQXlCO0FBQ3ZCLFFBQUltQixNQUFNLHdCQUFZbkIsSUFBWixDQUFWO0FBQ0EsUUFBSW1CLFFBQVEsQ0FBQyxDQUFiLEVBQWdCO0FBQ2Q7QUFDRDtBQUNEbkIsV0FBT0YsT0FBT0csSUFBUCxDQUFZLEVBQUVGLEdBQWQsQ0FBUDtBQUNEOztBQUVELE1BQUlBLFFBQVFtQixLQUFaLEVBQW1CO0FBQ2pCLFVBQU0sS0FBS04sYUFBTCxDQUFtQlosSUFBbkIsQ0FBTjtBQUNEOztBQUVELE1BQUksQ0FBQyxzQkFBTUEsSUFBTixDQUFELElBQWdCLENBQUNILFdBQVdHLElBQVgsQ0FBakIsSUFBcUNKLGtCQUFrQkksSUFBbEIsQ0FBekMsRUFBa0U7QUFDaEUsVUFBTSxLQUFLWSxhQUFMLENBQW1CWixJQUFuQixDQUFOO0FBQ0Q7O0FBRUQsU0FBTyx5QkFBaUI7QUFDdEJTLFdBQU9NLGFBQWFqQixNQUFiLEVBQXFCQyxHQUFyQixFQUEwQixFQUExQixFQUE4Qm1CLEtBQTlCO0FBRGUsR0FBakIsQ0FBUDtBQUdEOztBQUVELFNBQVNILFlBQVQsQ0FBc0JqQixNQUF0QixFQUE4QnNCLEdBQTlCLEVBQW1DQyxLQUFuQyxFQUEwQ0gsUUFBTSxDQUFoRCxFQUFtRDtBQUNqRHBCLFNBQU9ZLFVBQVAsQ0FBa0JRLEtBQWxCO0FBQ0EsU0FBT0ksU0FBU3hCLE9BQU9ZLFVBQVAsQ0FBa0JVLE1BQU1GLEtBQXhCLENBQVQsRUFBeUNHLEtBQXpDLENBQVA7QUFDRDs7QUFFRCxTQUFTZCxhQUFULENBQXVCUCxJQUF2QixFQUE2QjtBQUMzQixTQUFPLE9BQU9BLElBQVAsSUFBZUEsUUFBUSxHQUE5QjtBQUNEIiwiZmlsZSI6InJlYWQtbnVtZXJpYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCB7IGlzRU9TLCBnZXRDdXJyZW50UmVhZHRhYmxlIH0gZnJvbSAncmVhZHRhYmxlJztcbmltcG9ydCB7IGNvZGUgfSBmcm9tICdlc3V0aWxzJztcbmltcG9ydCB7IGlzVGVybWluYXRpbmcsIGdldEhleFZhbHVlIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBOdW1lcmljVG9rZW4gfSBmcm9tICcuLi90b2tlbnMnO1xuXG5pbXBvcnQgdHlwZSB7IENoYXJTdHJlYW0gfSBmcm9tICdyZWFkdGFibGUnO1xuXG5jb25zdCB7IGlzSWRlbnRpZmllclBhcnRFUzY6IGlzSWRlbnRpZmllclBhcnQsXG4gICAgICAgIGlzSWRlbnRpZmllclN0YXJ0RVM2OiBpc0lkZW50aWZpZXJTdGFydCB9ID0gY29kZTtcblxubGV0IHRlcm1pbmF0ZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlYWROdW1lcmljTGl0ZXJhbChzdHJlYW06IENoYXJTdHJlYW0pIHtcbiAgdGVybWluYXRlcyA9IGlzVGVybWluYXRpbmcoZ2V0Q3VycmVudFJlYWR0YWJsZSgpKTtcbiAgbGV0IGlkeCA9IDAsIGNoYXIgPSBzdHJlYW0ucGVlaygpO1xuXG4gIGlmIChjaGFyID09PSAnMCcpIHtcbiAgICBjaGFyID0gc3RyZWFtLnBlZWsoKytpZHgpO1xuICAgIGlmICghaXNFT1MoY2hhcikpIHtcbiAgICAgIGNoYXIgPSBjaGFyLnRvTG93ZXJDYXNlKCk7XG4gICAgICBzd2l0Y2ggKGNoYXIpIHtcbiAgICAgICAgY2FzZSAneCc6IHJldHVybiByZWFkSGV4TGl0ZXJhbC5jYWxsKHRoaXMsIHN0cmVhbSk7XG4gICAgICAgIGNhc2UgJ2InOiByZXR1cm4gcmVhZEJpbmFyeUxpdGVyYWwuY2FsbCh0aGlzLCBzdHJlYW0pO1xuICAgICAgICBjYXNlICdvJzogcmV0dXJuIHJlYWRPY3RhbExpdGVyYWwuY2FsbCh0aGlzLCBzdHJlYW0pO1xuICAgICAgICBkZWZhdWx0OiBpZiAoaXNEZWNpbWFsQ2hhcihjaGFyKSkge1xuICAgICAgICAgIHJldHVybiByZWFkTGVnYWN5T2N0YWxMaXRlcmFsLmNhbGwodGhpcywgc3RyZWFtKTsgLy8gcmVhZHMgbGVnYWN5IG9jdGFsIGFuZCBkZWNpbWFsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBOdW1lcmljVG9rZW4oe1xuICAgICAgICB2YWx1ZTogK3N0cmVhbS5yZWFkU3RyaW5nKClcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBlbHNlIGlmIChjaGFyICE9PSAnLicpIHtcbiAgICB3aGlsZSAoIXRlcm1pbmF0ZXMoY2hhcikgJiYgaXNEZWNpbWFsQ2hhcihjaGFyKSkge1xuICAgICAgY2hhciA9IHN0cmVhbS5wZWVrKCsraWR4KTtcbiAgICB9XG4gICAgaWYgKGlzRU9TKGNoYXIpKSB7XG4gICAgICByZXR1cm4gbmV3IE51bWVyaWNUb2tlbih7XG4gICAgICAgIHZhbHVlOiArc3RyZWFtLnJlYWRTdHJpbmcoaWR4KVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgaWR4ID0gYWRkRGVjaW1hbExpdGVyYWxTdWZmaXhMZW5ndGguY2FsbCh0aGlzLCBzdHJlYW0sIGlkeCk7XG5cbiAgY2hhciA9IHN0cmVhbS5wZWVrKGlkeCk7XG4gIGlmICghaXNFT1MoY2hhcikgJiYgIXRlcm1pbmF0ZXMoY2hhcikgJiYgaXNJZGVudGlmaWVyU3RhcnQoY2hhcikpIHtcbiAgICB0aHJvdyB0aGlzLmNyZWF0ZUlMTEVHQUwoY2hhcik7XG4gIH1cblxuICByZXR1cm4gbmV3IE51bWVyaWNUb2tlbih7XG4gICAgdmFsdWU6ICtzdHJlYW0ucmVhZFN0cmluZyhpZHgpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGREZWNpbWFsTGl0ZXJhbFN1ZmZpeExlbmd0aChzdHJlYW0sIGlkeCkge1xuICBsZXQgY2hhciA9IHN0cmVhbS5wZWVrKGlkeCk7XG4gIGlmIChjaGFyID09PSAnLicpIHtcbiAgICBjaGFyID0gc3RyZWFtLnBlZWsoKytpZHgpO1xuICAgIGlmIChpc0VPUyhjaGFyKSkgcmV0dXJuIGlkeDtcblxuICAgIHdoaWxlIChpc0RlY2ltYWxDaGFyKGNoYXIpKSB7XG4gICAgICBjaGFyID0gc3RyZWFtLnBlZWsoKytpZHgpO1xuICAgICAgaWYgKHRlcm1pbmF0ZXMoY2hhcikgfHwgaXNFT1MoY2hhcikpIHJldHVybiBpZHg7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNoYXIudG9Mb3dlckNhc2UoKSA9PT0gJ2UnKSB7XG4gICAgY2hhciA9IHN0cmVhbS5wZWVrKCsraWR4KTtcbiAgICBpZiAoaXNFT1MoY2hhcikpIHRocm93IHRoaXMuY3JlYXRlSUxMRUdBTChjaGFyKTtcblxuICAgIGlmIChjaGFyID09PSAnKycgfHwgY2hhciA9PT0gJy0nKSB7XG4gICAgICBjaGFyID0gc3RyZWFtLnBlZWsoKytpZHgpO1xuICAgICAgaWYgKGlzRU9TKGNoYXIpKSB0aHJvdyB0aGlzLmNyZWF0ZUlMTEVHQUwoY2hhcik7XG4gICAgfVxuXG4gICAgd2hpbGUgKGlzRGVjaW1hbENoYXIoY2hhcikpIHtcbiAgICAgIGNoYXIgPSBzdHJlYW0ucGVlaygrK2lkeCk7XG4gICAgICBpZiAodGVybWluYXRlcyhjaGFyKSB8fCBpc0VPUyhjaGFyKSkgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBpZHg7XG59XG5cbmZ1bmN0aW9uIHJlYWRMZWdhY3lPY3RhbExpdGVyYWwoc3RyZWFtKSB7XG4gIGxldCBpZHggPSAwLCBpc09jdGFsID0gdHJ1ZSwgY2hhciA9IHN0cmVhbS5wZWVrKCk7XG5cbiAgd2hpbGUgKCF0ZXJtaW5hdGVzKGNoYXIpICYmICFpc0VPUyhjaGFyKSkge1xuICAgIGlmICgnMCcgPD0gY2hhciAmJiBjaGFyIDw9ICc3Jykge1xuICAgICAgaWR4Kys7XG4gICAgfSBlbHNlIGlmIChjaGFyID09PSAnOCcgfHwgY2hhciA9PT0gJzknKSB7XG4gICAgICBpc09jdGFsID0gZmFsc2U7XG4gICAgICBpZHgrKztcbiAgICB9IGVsc2UgaWYgKGlzSWRlbnRpZmllclBhcnQoY2hhci5jaGFyQ29kZUF0KDApKSkge1xuICAgICAgdGhyb3cgdGhpcy5jcmVhdGVJTExFR0FMKGNoYXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjaGFyID0gc3RyZWFtLnBlZWsoaWR4KTtcbiAgfVxuXG4gIGlmICghaXNPY3RhbCkgcmV0dXJuIG5ldyBOdW1lcmljVG9rZW4oe1xuICAgIHZhbHVlOiBwYXJzZU51bWVyaWMoc3RyZWFtLCBpZHgsIDEwKSxcbiAgICBvY3RhbDogdHJ1ZSxcbiAgICBub2N0YWw6ICFpc09jdGFsXG4gIH0pO1xuXG4gIHJldHVybiBuZXcgTnVtZXJpY1Rva2VuKHtcbiAgICB2YWx1ZTogcGFyc2VOdW1lcmljKHN0cmVhbSwgaWR4LCA4KSxcbiAgICBvY3RhbDogdHJ1ZSxcbiAgICBub2N0YWw6ICFpc09jdGFsXG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZWFkT2N0YWxMaXRlcmFsKHN0cmVhbSkge1xuICBsZXQgc3RhcnQsIGlkeCA9IHN0YXJ0ID0gMiwgY2hhciA9IHN0cmVhbS5wZWVrKGlkeCk7XG4gIHdoaWxlICghdGVybWluYXRlcyhjaGFyKSAmJiAhaXNFT1MoY2hhcikpIHtcbiAgICBpZiAoJzAnIDw9IGNoYXIgJiYgY2hhciA8PSAnNycpIHtcbiAgICAgIGNoYXIgPSBzdHJlYW0ucGVlaygrK2lkeCk7XG4gICAgfSBlbHNlIGlmIChpc0lkZW50aWZpZXJQYXJ0KGNoYXIuY2hhckNvZGVBdCgwKSkpIHtcbiAgICAgIHRocm93IHRoaXMuY3JlYXRlSUxMRUdBTChjaGFyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKGlkeCA9PT0gc3RhcnQpIHtcbiAgICB0aHJvdyB0aGlzLmNyZWF0ZUlMTEVHQUwoY2hhcik7XG4gIH1cblxuICByZXR1cm4gbmV3IE51bWVyaWNUb2tlbih7XG4gICAgdmFsdWU6IHBhcnNlTnVtZXJpYyhzdHJlYW0sIGlkeCwgOCwgc3RhcnQpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZWFkQmluYXJ5TGl0ZXJhbChzdHJlYW0pIHtcbiAgbGV0IHN0YXJ0LCBpZHggPSBzdGFydCA9IDI7XG4gIGxldCBjaGFyID0gc3RyZWFtLnBlZWsoaWR4KTtcblxuICB3aGlsZSghdGVybWluYXRlcyhjaGFyKSAmJiAhaXNFT1MoY2hhcikpIHtcbiAgICBpZiAoY2hhciAhPT0gJzAnICYmIGNoYXIgIT09ICcxJykge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNoYXIgPSBzdHJlYW0ucGVlayhpZHgpO1xuICAgIGlkeCsrO1xuICB9XG5cbiAgaWYgKGlkeCA9PT0gc3RhcnQpIHtcbiAgICB0aHJvdyB0aGlzLmNyZWF0ZUlMTEVHQUwoY2hhcik7XG4gIH1cblxuICBpZiAoIWlzRU9TKGNoYXIpICYmICF0ZXJtaW5hdGVzKGNoYXIpICYmIChpc0lkZW50aWZpZXJTdGFydChjaGFyKSB8fCBpc0RlY2ltYWxDaGFyKGNoYXIpKSkge1xuICAgIHRocm93IHRoaXMuY3JlYXRlSUxMRUdBTChjaGFyKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgTnVtZXJpY1Rva2VuKHtcbiAgICB2YWx1ZTogcGFyc2VOdW1lcmljKHN0cmVhbSwgaWR4LCAyLCBzdGFydClcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRIZXhMaXRlcmFsKHN0cmVhbSkge1xuICBsZXQgc3RhcnQsIGlkeCA9IHN0YXJ0ID0gMiwgY2hhciA9IHN0cmVhbS5wZWVrKGlkeCk7XG4gIHdoaWxlKCF0ZXJtaW5hdGVzKGNoYXIpKSB7XG4gICAgbGV0IGhleCA9IGdldEhleFZhbHVlKGNoYXIpO1xuICAgIGlmIChoZXggPT09IC0xKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2hhciA9IHN0cmVhbS5wZWVrKCsraWR4KTtcbiAgfVxuXG4gIGlmIChpZHggPT09IHN0YXJ0KSB7XG4gICAgdGhyb3cgdGhpcy5jcmVhdGVJTExFR0FMKGNoYXIpO1xuICB9XG5cbiAgaWYgKCFpc0VPUyhjaGFyKSAmJiAhdGVybWluYXRlcyhjaGFyKSAmJiBpc0lkZW50aWZpZXJTdGFydChjaGFyKSkge1xuICAgIHRocm93IHRoaXMuY3JlYXRlSUxMRUdBTChjaGFyKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgTnVtZXJpY1Rva2VuKHtcbiAgICB2YWx1ZTogcGFyc2VOdW1lcmljKHN0cmVhbSwgaWR4LCAxNiwgc3RhcnQpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwYXJzZU51bWVyaWMoc3RyZWFtLCBsZW4sIHJhZGl4LCBzdGFydD0wKSB7XG4gIHN0cmVhbS5yZWFkU3RyaW5nKHN0YXJ0KTtcbiAgcmV0dXJuIHBhcnNlSW50KHN0cmVhbS5yZWFkU3RyaW5nKGxlbiAtIHN0YXJ0KSwgcmFkaXgpO1xufVxuXG5mdW5jdGlvbiBpc0RlY2ltYWxDaGFyKGNoYXIpIHtcbiAgcmV0dXJuICcwJyA8PSBjaGFyICYmIGNoYXIgPD0gJzknO1xufVxuIl19