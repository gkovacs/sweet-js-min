'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = readIdentifier;

var _utils = require('./utils');

var _readtable = require('readtable');

var _tokens = require('../tokens');

let terminates;

function readIdentifier(stream) {
  terminates = (0, _utils.isTerminating)((0, _readtable.getCurrentReadtable)());
  let char = stream.peek();
  let code;
  let check = _utils.isIdentifierStart;
  let idx = 0;
  while (!terminates(char) && !(0, _readtable.isEOS)(char)) {
    code = char.charCodeAt(0);
    if (char === '\\' || 0xD800 <= code && code <= 0xDBFF) {
      return new _tokens.IdentifierToken({
        value: getEscapedIdentifier.call(this, stream)
      });
    }
    if (!check(code)) {
      return new _tokens.IdentifierToken({
        value: stream.readString(idx)
      });
    }
    char = stream.peek(++idx);
    check = _utils.isIdentifierPart;
  }
  return new _tokens.IdentifierToken({
    value: stream.readString(idx)
  });
}

function getEscapedIdentifier(stream) {
  const sPeek = stream.peek.bind(stream);
  let id = '';
  let check = _utils.isIdentifierStart;
  let char = sPeek();
  let code = char.charCodeAt(0);
  while (!terminates(char) && !(0, _readtable.isEOS)(char)) {
    let streamRead = false;
    if (char === '\\') {
      let nxt = sPeek(1);
      if ((0, _readtable.isEOS)(nxt)) {
        throw this.createILLEGAL(char);
      }
      if (nxt !== 'u') {
        throw this.createILLEGAL(char);
      }
      code = (0, _utils.scanUnicode)(stream, 2);
      streamRead = true;
      if (code < 0) {
        throw this.createILLEGAL(char);
      }
    } else if (0xD800 <= code && code <= 0xDBFF) {
      if ((0, _readtable.isEOS)(char)) {
        throw this.createILLEGAL(char);
      }
      let lowSurrogateCode = sPeek(1).charCodeAt(0);
      if (0xDC00 > lowSurrogateCode || lowSurrogateCode > 0xDFFF) {
        throw this.createILLEGAL(char);
      }
      stream.readString(2);
      code = decodeUtf16(code, lowSurrogateCode);
      streamRead = true;
    }
    if (!check(code)) {
      if (id.length < 1) {
        throw this.createILLEGAL(char);
      }
      return id;
    }

    if (!streamRead) stream.readString();

    id += String.fromCodePoint(code);
    char = sPeek();
    code = char.charCodeAt(0);
    check = _utils.isIdentifierPart;
  }
  return id;
}

function decodeUtf16(lead, trail) {
  return (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yZWFkZXIvcmVhZC1pZGVudGlmaWVyLmpzIl0sIm5hbWVzIjpbInJlYWRJZGVudGlmaWVyIiwidGVybWluYXRlcyIsInN0cmVhbSIsImNoYXIiLCJwZWVrIiwiY29kZSIsImNoZWNrIiwiaWR4IiwiY2hhckNvZGVBdCIsInZhbHVlIiwiZ2V0RXNjYXBlZElkZW50aWZpZXIiLCJjYWxsIiwicmVhZFN0cmluZyIsInNQZWVrIiwiYmluZCIsImlkIiwic3RyZWFtUmVhZCIsIm54dCIsImNyZWF0ZUlMTEVHQUwiLCJsb3dTdXJyb2dhdGVDb2RlIiwiZGVjb2RlVXRmMTYiLCJsZW5ndGgiLCJTdHJpbmciLCJmcm9tQ29kZVBvaW50IiwibGVhZCIsInRyYWlsIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFhd0JBLGM7O0FBWHhCOztBQUVBOztBQUdBOztBQUlBLElBQUlDLFVBQUo7O0FBRWUsU0FBU0QsY0FBVCxDQUF3QkUsTUFBeEIsRUFBNEM7QUFDekRELGVBQWEsMEJBQWMscUNBQWQsQ0FBYjtBQUNBLE1BQUlFLE9BQU9ELE9BQU9FLElBQVAsRUFBWDtBQUNBLE1BQUlDLElBQUo7QUFDQSxNQUFJQyxnQ0FBSjtBQUNBLE1BQUlDLE1BQU0sQ0FBVjtBQUNBLFNBQU0sQ0FBQ04sV0FBV0UsSUFBWCxDQUFELElBQXFCLENBQUMsc0JBQU1BLElBQU4sQ0FBNUIsRUFBeUM7QUFDdkNFLFdBQU9GLEtBQUtLLFVBQUwsQ0FBZ0IsQ0FBaEIsQ0FBUDtBQUNBLFFBQUlMLFNBQVMsSUFBVCxJQUFpQixVQUFVRSxJQUFWLElBQWtCQSxRQUFRLE1BQS9DLEVBQXVEO0FBQ3JELGFBQU8sNEJBQW9CO0FBQ3pCSSxlQUFPQyxxQkFBcUJDLElBQXJCLENBQTBCLElBQTFCLEVBQWdDVCxNQUFoQztBQURrQixPQUFwQixDQUFQO0FBR0Q7QUFDRCxRQUFJLENBQUNJLE1BQU1ELElBQU4sQ0FBTCxFQUFrQjtBQUNoQixhQUFPLDRCQUFvQjtBQUN6QkksZUFBT1AsT0FBT1UsVUFBUCxDQUFrQkwsR0FBbEI7QUFEa0IsT0FBcEIsQ0FBUDtBQUdEO0FBQ0RKLFdBQU9ELE9BQU9FLElBQVAsQ0FBWSxFQUFFRyxHQUFkLENBQVA7QUFDQUQ7QUFDRDtBQUNELFNBQU8sNEJBQW9CO0FBQ3pCRyxXQUFPUCxPQUFPVSxVQUFQLENBQWtCTCxHQUFsQjtBQURrQixHQUFwQixDQUFQO0FBR0Q7O0FBRUQsU0FBU0csb0JBQVQsQ0FBOEJSLE1BQTlCLEVBQXNDO0FBQ3BDLFFBQU1XLFFBQVFYLE9BQU9FLElBQVAsQ0FBWVUsSUFBWixDQUFpQlosTUFBakIsQ0FBZDtBQUNBLE1BQUlhLEtBQUssRUFBVDtBQUNBLE1BQUlULGdDQUFKO0FBQ0EsTUFBSUgsT0FBT1UsT0FBWDtBQUNBLE1BQUlSLE9BQU9GLEtBQUtLLFVBQUwsQ0FBZ0IsQ0FBaEIsQ0FBWDtBQUNBLFNBQU8sQ0FBQ1AsV0FBV0UsSUFBWCxDQUFELElBQXFCLENBQUMsc0JBQU1BLElBQU4sQ0FBN0IsRUFBMEM7QUFDeEMsUUFBSWEsYUFBYSxLQUFqQjtBQUNBLFFBQUliLFNBQVMsSUFBYixFQUFtQjtBQUNqQixVQUFJYyxNQUFNSixNQUFNLENBQU4sQ0FBVjtBQUNBLFVBQUksc0JBQU1JLEdBQU4sQ0FBSixFQUFnQjtBQUNkLGNBQU0sS0FBS0MsYUFBTCxDQUFtQmYsSUFBbkIsQ0FBTjtBQUNEO0FBQ0QsVUFBSWMsUUFBUSxHQUFaLEVBQWlCO0FBQ2YsY0FBTSxLQUFLQyxhQUFMLENBQW1CZixJQUFuQixDQUFOO0FBQ0Q7QUFDREUsYUFBTyx3QkFBWUgsTUFBWixFQUFvQixDQUFwQixDQUFQO0FBQ0FjLG1CQUFhLElBQWI7QUFDQSxVQUFJWCxPQUFPLENBQVgsRUFBYztBQUNaLGNBQU0sS0FBS2EsYUFBTCxDQUFtQmYsSUFBbkIsQ0FBTjtBQUNEO0FBQ0YsS0FiRCxNQWFPLElBQUksVUFBVUUsSUFBVixJQUFrQkEsUUFBUSxNQUE5QixFQUFzQztBQUMzQyxVQUFJLHNCQUFNRixJQUFOLENBQUosRUFBaUI7QUFDZixjQUFNLEtBQUtlLGFBQUwsQ0FBbUJmLElBQW5CLENBQU47QUFDRDtBQUNELFVBQUlnQixtQkFBbUJOLE1BQU0sQ0FBTixFQUFTTCxVQUFULENBQW9CLENBQXBCLENBQXZCO0FBQ0EsVUFBSSxTQUFTVyxnQkFBVCxJQUE2QkEsbUJBQW1CLE1BQXBELEVBQTREO0FBQzFELGNBQU0sS0FBS0QsYUFBTCxDQUFtQmYsSUFBbkIsQ0FBTjtBQUNEO0FBQ0RELGFBQU9VLFVBQVAsQ0FBa0IsQ0FBbEI7QUFDQVAsYUFBT2UsWUFBWWYsSUFBWixFQUFrQmMsZ0JBQWxCLENBQVA7QUFDQUgsbUJBQWEsSUFBYjtBQUNEO0FBQ0QsUUFBSSxDQUFDVixNQUFNRCxJQUFOLENBQUwsRUFBa0I7QUFDaEIsVUFBSVUsR0FBR00sTUFBSCxHQUFZLENBQWhCLEVBQW1CO0FBQ2pCLGNBQU0sS0FBS0gsYUFBTCxDQUFtQmYsSUFBbkIsQ0FBTjtBQUNEO0FBQ0QsYUFBT1ksRUFBUDtBQUNEOztBQUVELFFBQUksQ0FBQ0MsVUFBTCxFQUFpQmQsT0FBT1UsVUFBUDs7QUFFakJHLFVBQU1PLE9BQU9DLGFBQVAsQ0FBcUJsQixJQUFyQixDQUFOO0FBQ0FGLFdBQU9VLE9BQVA7QUFDQVIsV0FBT0YsS0FBS0ssVUFBTCxDQUFnQixDQUFoQixDQUFQO0FBQ0FGO0FBQ0Q7QUFDRCxTQUFPUyxFQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssV0FBVCxDQUFxQkksSUFBckIsRUFBMkJDLEtBQTNCLEVBQWtDO0FBQ2hDLFNBQU8sQ0FBQ0QsT0FBTyxNQUFSLElBQWtCLEtBQWxCLElBQTJCQyxRQUFRLE1BQW5DLElBQTZDLE9BQXBEO0FBQ0QiLCJmaWxlIjoicmVhZC1pZGVudGlmaWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IHsgc2NhblVuaWNvZGUgfSBmcm9tICcuL3V0aWxzJztcblxuaW1wb3J0IHsgaXNFT1MsIGdldEN1cnJlbnRSZWFkdGFibGUgfSBmcm9tICdyZWFkdGFibGUnO1xuaW1wb3J0IHR5cGUgeyBDaGFyU3RyZWFtIH0gZnJvbSAncmVhZHRhYmxlJztcblxuaW1wb3J0IHsgSWRlbnRpZmllclRva2VuIH0gZnJvbSAnLi4vdG9rZW5zJztcblxuaW1wb3J0IHsgaXNUZXJtaW5hdGluZywgaXNJZGVudGlmaWVyUGFydCwgaXNJZGVudGlmaWVyU3RhcnQgfSBmcm9tICcuL3V0aWxzJztcblxubGV0IHRlcm1pbmF0ZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlYWRJZGVudGlmaWVyKHN0cmVhbTogQ2hhclN0cmVhbSkge1xuICB0ZXJtaW5hdGVzID0gaXNUZXJtaW5hdGluZyhnZXRDdXJyZW50UmVhZHRhYmxlKCkpO1xuICBsZXQgY2hhciA9IHN0cmVhbS5wZWVrKCk7XG4gIGxldCBjb2RlO1xuICBsZXQgY2hlY2sgPSBpc0lkZW50aWZpZXJTdGFydDtcbiAgbGV0IGlkeCA9IDA7XG4gIHdoaWxlKCF0ZXJtaW5hdGVzKGNoYXIpICYmICFpc0VPUyhjaGFyKSkge1xuICAgIGNvZGUgPSBjaGFyLmNoYXJDb2RlQXQoMCk7XG4gICAgaWYgKGNoYXIgPT09ICdcXFxcJyB8fCAweEQ4MDAgPD0gY29kZSAmJiBjb2RlIDw9IDB4REJGRikge1xuICAgICAgcmV0dXJuIG5ldyBJZGVudGlmaWVyVG9rZW4oe1xuICAgICAgICB2YWx1ZTogZ2V0RXNjYXBlZElkZW50aWZpZXIuY2FsbCh0aGlzLCBzdHJlYW0pXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKCFjaGVjayhjb2RlKSkge1xuICAgICAgcmV0dXJuIG5ldyBJZGVudGlmaWVyVG9rZW4oe1xuICAgICAgICB2YWx1ZTogc3RyZWFtLnJlYWRTdHJpbmcoaWR4KVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNoYXIgPSBzdHJlYW0ucGVlaygrK2lkeCk7XG4gICAgY2hlY2sgPSBpc0lkZW50aWZpZXJQYXJ0O1xuICB9XG4gIHJldHVybiBuZXcgSWRlbnRpZmllclRva2VuKHtcbiAgICB2YWx1ZTogc3RyZWFtLnJlYWRTdHJpbmcoaWR4KVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0RXNjYXBlZElkZW50aWZpZXIoc3RyZWFtKSB7XG4gIGNvbnN0IHNQZWVrID0gc3RyZWFtLnBlZWsuYmluZChzdHJlYW0pO1xuICBsZXQgaWQgPSAnJztcbiAgbGV0IGNoZWNrID0gaXNJZGVudGlmaWVyU3RhcnQ7XG4gIGxldCBjaGFyID0gc1BlZWsoKTtcbiAgbGV0IGNvZGUgPSBjaGFyLmNoYXJDb2RlQXQoMCk7XG4gIHdoaWxlICghdGVybWluYXRlcyhjaGFyKSAmJiAhaXNFT1MoY2hhcikpIHtcbiAgICBsZXQgc3RyZWFtUmVhZCA9IGZhbHNlO1xuICAgIGlmIChjaGFyID09PSAnXFxcXCcpIHtcbiAgICAgIGxldCBueHQgPSBzUGVlaygxKTtcbiAgICAgIGlmIChpc0VPUyhueHQpKSB7XG4gICAgICAgIHRocm93IHRoaXMuY3JlYXRlSUxMRUdBTChjaGFyKTtcbiAgICAgIH1cbiAgICAgIGlmIChueHQgIT09ICd1Jykge1xuICAgICAgICB0aHJvdyB0aGlzLmNyZWF0ZUlMTEVHQUwoY2hhcik7XG4gICAgICB9XG4gICAgICBjb2RlID0gc2NhblVuaWNvZGUoc3RyZWFtLCAyKTtcbiAgICAgIHN0cmVhbVJlYWQgPSB0cnVlO1xuICAgICAgaWYgKGNvZGUgPCAwKSB7XG4gICAgICAgIHRocm93IHRoaXMuY3JlYXRlSUxMRUdBTChjaGFyKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKDB4RDgwMCA8PSBjb2RlICYmIGNvZGUgPD0gMHhEQkZGKSB7XG4gICAgICBpZiAoaXNFT1MoY2hhcikpIHtcbiAgICAgICAgdGhyb3cgdGhpcy5jcmVhdGVJTExFR0FMKGNoYXIpO1xuICAgICAgfVxuICAgICAgbGV0IGxvd1N1cnJvZ2F0ZUNvZGUgPSBzUGVlaygxKS5jaGFyQ29kZUF0KDApO1xuICAgICAgaWYgKDB4REMwMCA+IGxvd1N1cnJvZ2F0ZUNvZGUgfHwgbG93U3Vycm9nYXRlQ29kZSA+IDB4REZGRikge1xuICAgICAgICB0aHJvdyB0aGlzLmNyZWF0ZUlMTEVHQUwoY2hhcik7XG4gICAgICB9XG4gICAgICBzdHJlYW0ucmVhZFN0cmluZygyKTtcbiAgICAgIGNvZGUgPSBkZWNvZGVVdGYxNihjb2RlLCBsb3dTdXJyb2dhdGVDb2RlKTtcbiAgICAgIHN0cmVhbVJlYWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoIWNoZWNrKGNvZGUpKSB7XG4gICAgICBpZiAoaWQubGVuZ3RoIDwgMSkge1xuICAgICAgICB0aHJvdyB0aGlzLmNyZWF0ZUlMTEVHQUwoY2hhcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gaWQ7XG4gICAgfVxuXG4gICAgaWYgKCFzdHJlYW1SZWFkKSBzdHJlYW0ucmVhZFN0cmluZygpO1xuXG4gICAgaWQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoY29kZSk7XG4gICAgY2hhciA9IHNQZWVrKCk7XG4gICAgY29kZSA9IGNoYXIuY2hhckNvZGVBdCgwKTtcbiAgICBjaGVjayA9IGlzSWRlbnRpZmllclBhcnQ7XG4gIH1cbiAgcmV0dXJuIGlkO1xufVxuXG5mdW5jdGlvbiBkZWNvZGVVdGYxNihsZWFkLCB0cmFpbCkge1xuICByZXR1cm4gKGxlYWQgLSAweEQ4MDApICogMHg0MDAgKyAodHJhaWwgLSAweERDMDApICsgMHgxMDAwMDtcbn1cblxuIl19