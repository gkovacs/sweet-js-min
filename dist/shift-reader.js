"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _tokenizer=require("shift-parser/dist/tokenizer"),_tokenizer2=_interopRequireDefault(_tokenizer),_immutable=require("immutable"),_syntax=require("./syntax"),_syntax2=_interopRequireDefault(_syntax),_ramda=require("ramda"),R=_interopRequireWildcard(_ramda),_ramdaFantasy=require("ramda-fantasy"),_errors=require("./errors"),_terms=require("./terms"),_terms2=_interopRequireDefault(_terms);function _interopRequireWildcard(c){if(c&&c.__esModule)return c;var d={};if(null!=c)for(var e in c)Object.prototype.hasOwnProperty.call(c,e)&&(d[e]=c[e]);return d.default=c,d}function _interopRequireDefault(c){return c&&c.__esModule?c:{default:c}}const Just=_ramdaFantasy.Maybe.Just,Nothing=_ramdaFantasy.Maybe.Nothing,LSYNTAX={name:"left-syntax"},RSYNTAX={name:"right-syntax"},AT={klass:_tokenizer.TokenClass.Punctuator,name:"@"},literalKeywords=["this","null","true","false"],isLeftBracket=R.whereEq({type:_tokenizer.TokenType.LBRACK}),isLeftBrace=R.whereEq({type:_tokenizer.TokenType.LBRACE}),isLeftParen=R.whereEq({type:_tokenizer.TokenType.LPAREN}),isRightBracket=R.whereEq({type:_tokenizer.TokenType.RBRACK}),isRightBrace=R.whereEq({type:_tokenizer.TokenType.RBRACE}),isRightParen=R.whereEq({type:_tokenizer.TokenType.RPAREN}),isEOS=R.whereEq({type:_tokenizer.TokenType.EOS}),isLeftSyntax=R.whereEq({type:LSYNTAX}),isRightSyntax=R.whereEq({type:RSYNTAX}),isLeftDelimiter=R.anyPass([isLeftBracket,isLeftBrace,isLeftParen,isLeftSyntax]),isRightDelimiter=R.anyPass([isRightBracket,isRightBrace,isRightParen,isRightSyntax]),isMatchingDelimiters=R.cond([[isLeftBracket,(c,d)=>isRightBracket(d)],[isLeftBrace,(c,d)=>isRightBrace(d)],[isLeftParen,(c,d)=>isRightParen(d)],[isLeftSyntax,(c,d)=>isRightSyntax(d)],[R.T,R.F]]),assignOps=["=","+=","-=","*=","/=","%=","<<=",">>=",">>>=","&=","|=","^=",","],binaryOps=["+","-","*","/","%","<<",">>",">>>","&","|","^","&&","||","?",":","===","==",">=","<=","<",">","!=","!==","instanceof"],unaryOps=["++","--","~","!","delete","void","typeof","yield","throw","new"],isEmpty=R.whereEq({size:0}),isPunctuator=c=>c.match("punctuator"),isKeyword=c=>c.match("keyword"),isParens=c=>c.match("parens"),isBraces=c=>c.match("braces"),isIdentifier=c=>c.match("identifier"),isVal=R.curry((c,d)=>d.val()===c),isDot=R.allPass([isPunctuator,isVal(".")]),isColon=R.allPass([isPunctuator,isVal(":")]),isFunctionKeyword=R.allPass([isKeyword,isVal("function")]),isOperator=c=>(c.match("punctuator")||c.match("keyword"))&&R.any(R.equals(c.val()),assignOps.concat(binaryOps).concat(unaryOps)),isNonLiteralKeyword=R.allPass([isKeyword,c=>R.none(R.equals(c.val()),literalKeywords)]),isKeywordExprPrefix=R.allPass([isKeyword,c=>R.any(R.equals(c.val()),["instanceof","typeof","delete","void","yield","throw","new","case"])]);let last=c=>c.last(),safeLast=R.pipe(R.cond([[isEmpty,R.always(Nothing())],[R.T,R.compose(_ramdaFantasy.Maybe.of,last)]])),stuffTrue=R.curry((c,d)=>d?Just(c):Nothing()),stuffFalse=R.curry((c,d)=>d?Nothing():Just(c)),isTopColon=R.pipe(safeLast,R.map(isColon),_ramdaFantasy.Maybe.maybe(!1,R.identity)),isTopPunctuator=R.pipe(safeLast,R.map(isPunctuator),_ramdaFantasy.Maybe.maybe(!1,R.identity)),isExprReturn=R.curry((c,d)=>{let e=safeLast(d),f=pop(d).chain(safeLast);return!!f.map(isDot).getOrElse(!1)||e.map(g=>{return g.match("keyword")&&"return"===g.val()&&g.lineNumber()===c}).getOrElse(!1)});const isTopOperator=R.pipe(safeLast,R.map(isOperator),_ramdaFantasy.Maybe.maybe(!1,R.identity)),isTopKeywordExprPrefix=R.pipe(safeLast,R.map(isKeywordExprPrefix),_ramdaFantasy.Maybe.maybe(!1,R.identity));let isExprPrefix=R.curry((c,d)=>R.cond([[isEmpty,R.always(d)],[isTopColon,R.always(d)],[isTopKeywordExprPrefix,R.T],[isTopOperator,R.T],[isTopPunctuator,R.always(d)],[isExprReturn(c),R.T],[R.T,R.F]])),curly=c=>safeLast(c).map(isBraces).chain(stuffTrue(c)),paren=c=>safeLast(c).map(isParens).chain(stuffTrue(c)),func=c=>safeLast(c).map(isFunctionKeyword).chain(stuffTrue(c)),ident=c=>safeLast(c).map(isIdentifier).chain(stuffTrue(c)),nonLiteralKeyword=c=>safeLast(c).map(isNonLiteralKeyword).chain(stuffTrue(c)),opt=R.curry((c,d,e)=>{let f=R.pipeK(c,d)(_ramdaFantasy.Maybe.of(e));return _ramdaFantasy.Maybe.isJust(f)?f:_ramdaFantasy.Maybe.of(e)}),notDot=R.ifElse(R.whereEq({size:0}),Just,c=>safeLast(c).map(d=>!(d.match("punctuator")&&"."===d.val())).chain(stuffTrue(c))),pop=R.compose(Just,c=>c.pop());const functionPrefix=R.pipeK(curly,pop,paren,pop,opt(ident,pop),func),isRegexPrefix=c=>R.anyPass([isEmpty,isTopPunctuator,R.pipe(_ramdaFantasy.Maybe.of,R.pipeK(nonLiteralKeyword,pop,notDot),_ramdaFantasy.Maybe.isJust),R.pipe(_ramdaFantasy.Maybe.of,R.pipeK(paren,pop,nonLiteralKeyword,pop,notDot),_ramdaFantasy.Maybe.isJust),R.pipe(_ramdaFantasy.Maybe.of,functionPrefix,R.chain(d=>{return safeLast(d).map(e=>e.lineNumber()).chain(e=>{return pop(d).map(isExprPrefix(e,c))}).chain(stuffFalse(d))}),_ramdaFantasy.Maybe.isJust),d=>{let e=R.pipe(_ramdaFantasy.Maybe.of,functionPrefix,_ramdaFantasy.Maybe.isJust)(d);return!e&&R.pipe(_ramdaFantasy.Maybe.of,R.chain(curly),R.chain(f=>{return safeLast(f).map(g=>g.lineNumber()).chain(g=>{return pop(f).map(isExprPrefix(g,c))}).chain(stuffFalse(f))}),_ramdaFantasy.Maybe.isJust)(d)}]);function lastEl(c){return c[c.length-1]}class Reader extends _tokenizer2.default{constructor(c,d,e){if(super(Array.isArray(c)?c.join(""):c),this.delimStack=new Map,this.insideSyntaxTemplate=[!1],this.context=d,Array.isArray(c)){let f=0;this.replacementIndex=R.reduce((g,h)=>{return g.push({index:f+h[0].length,replacement:h[1]}),f+=h[0].length,g},[],R.zip(c,e))}}read(){let c=0>=arguments.length||arguments[0]===void 0?[]:arguments[0],d=1>=arguments.length||arguments[1]===void 0?!1:arguments[1],e=2>=arguments.length||arguments[2]===void 0?!1:arguments[2],f=(0,_immutable.List)();for(;;){let g=this.advance(f,d);if(g.scopesets||g instanceof _terms2.default){c.push(g);continue}if(Array.isArray(g)){Array.prototype.push.apply(c,g);continue}if(_immutable.List.isList(g)){Array.prototype.push.apply(c,g.toArray());continue}if(isEOS(g)){if(c[0]&&isLeftDelimiter(c[0].token))throw this.createUnexpected(g);break}if(isLeftDelimiter(g)){isLeftSyntax(g)&&this.insideSyntaxTemplate.push(!0);let h=g.slice.startLocation.line,i=!isLeftBrace(g)||isExprPrefix(h,d)(f),j=this.read([new _syntax2.default(g,this.context)],i,!1),k=new _syntax2.default(j,this.context);if(f=f.concat(k),c.push(k),e)break}else if(isRightDelimiter(g)){if(c[0]&&!isMatchingDelimiters(c[0].token,g))throw this.createUnexpected(g);let h=new _syntax2.default(g,this.context);c.push(h),lastEl(this.insideSyntaxTemplate)&&isRightSyntax(g)&&this.insideSyntaxTemplate.pop();break}else{let h=new _syntax2.default(g,this.context);f=f.concat(h),c.push(h)}}return(0,_immutable.List)(c)}advance(c,d){if(this.lastIndex=this.index,this.lastLine=this.line,this.lastLineStart=this.lineStart,this.skipComment(),this.startIndex=this.index,this.startLine=this.line,this.startLineStart=this.lineStart,this.replacementIndex&&this.replacementIndex[0]&&this.index>=this.replacementIndex[0].index){let g=this.replacementIndex[0].replacement;return this.replacementIndex.shift(),g}let e=this.source.charCodeAt(this.index);if(96===e){let g,h=[],i=this.getLocation(),j=this.index;if(this.index++,lastEl(this.insideSyntaxTemplate)){let k=this.getSlice(j,i);return{type:RSYNTAX,value:"`",slice:k}}do g=this.scanTemplateElement(),h.push(g),g.interp&&(g=this.read([],!1,!0),(0,_errors.assert)(1===g.size,"should only have read a single delimiter inside a template"),h.push(g.get(0)));while(!g.tail);return{type:_tokenizer.TokenType.TEMPLATE,items:(0,_immutable.List)(h),slice:this.getSlice(j,i)}}if(35===e){let g=this.getLocation(),h=this.index,i=this.getSlice(h,g);return this.index++,96===this.source.charCodeAt(this.index)?(this.index++,{type:LSYNTAX,value:"#`",slice:i}):{type:_tokenizer.TokenType.IDENTIFIER,value:"#",slice:i}}if(64===e){let g=this.getLocation(),h=this.index,i=this.getSlice(h,g);return this.index++,{type:AT,value:"@",slice:i}}let f=super.advance();return f.type===_tokenizer.TokenType.DIV&&isRegexPrefix(d)(c)?super.scanRegExp("/"):f}scanTemplateElement(){for(let e,c=this.getLocation(),d=this.index;this.index<this.source.length;)switch(e=this.source.charCodeAt(this.index),e){case 96:{let f=this.getSlice(d,c);return this.index++,{type:_tokenizer.TokenType.TEMPLATE,tail:!0,interp:!1,slice:f}}case 36:if(123===this.source.charCodeAt(this.index+1)){let f=this.getSlice(d,c);return this.index+=1,{type:_tokenizer.TokenType.TEMPLATE,tail:!1,interp:!0,slice:f}}this.index++;break;case 92:{let f=this.scanStringEscape("",null)[1];if(null!=f)throw this.createILLEGAL();break}default:this.index++;}throw this.createILLEGAL()}}exports.default=Reader;

