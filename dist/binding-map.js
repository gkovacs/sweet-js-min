'use strict';Object.defineProperty(exports,'__esModule',{value:!0});var _immutable=require('immutable'),_errors=require('./errors'),_ramdaFantasy=require('ramda-fantasy'),_syntax=require('./syntax'),_syntax2=_interopRequireDefault(_syntax);function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}class BindingMap{constructor(){this._map=new Map}add(a,{binding:b,phase:c,skipDup:d=!1}){let e=a.val(),f=a.scopesets.all,g=a.scopesets.phase.has(c)?a.scopesets.phase.get(c):(0,_immutable.List)();g=f.concat(g),(0,_errors.assert)(null!=c,'must provide a phase for binding add');let h=this._map.get(e);if(h){if(d&&h.some(i=>i.scopes.equals(g)))return;this._map.set(e,h.push({scopes:g,binding:b,alias:_ramdaFantasy.Maybe.Nothing()}))}else this._map.set(e,_immutable.List.of({scopes:g,binding:b,alias:_ramdaFantasy.Maybe.Nothing()}))}addForward(a,b,c,d){let e=a.token.value,f=a.scopesets.all,g=a.scopesets.phase.has(d)?a.scopesets.phase.get(d):(0,_immutable.List)();g=f.concat(g),(0,_errors.assert)(null!=d,'must provide a phase for binding add');let h=this._map.get(e);h?this._map.set(e,h.push({scopes:g,binding:c,alias:_ramdaFantasy.Maybe.of(b)})):this._map.set(e,_immutable.List.of({scopes:g,binding:c,alias:_ramdaFantasy.Maybe.of(b)}))}get(a){return this._map.get(a.token.value)}}exports.default=BindingMap;

