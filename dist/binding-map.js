"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _immutable=require("immutable"),_errors=require("./errors"),_ramdaFantasy=require("ramda-fantasy");class BindingMap{constructor(){this._map=new Map}add(a,b){let c=b.binding,d=b.phase;var e=b.skipDup;let g=a.val(),h=a.scopesets.all,i=a.scopesets.phase.has(d)?a.scopesets.phase.get(d):(0,_immutable.List)();if(i=h.concat(i),(0,_errors.assert)(null!=d,"must provide a phase for binding add"),this._map.has(g)){let j=this._map.get(g);if(void 0!==e&&e&&j.some(k=>k.scopes.equals(i)))return;this._map.set(g,j.push({scopes:i,binding:c,alias:_ramdaFantasy.Maybe.Nothing()}))}else this._map.set(g,_immutable.List.of({scopes:i,binding:c,alias:_ramdaFantasy.Maybe.Nothing()}))}addForward(a,b,c,d){let e=a.token.value,f=a.scopesets.all,g=a.scopesets.phase.has(d)?a.scopesets.phase.get(d):(0,_immutable.List)();if(g=f.concat(g),(0,_errors.assert)(null!=d,"must provide a phase for binding add"),this._map.has(e)){let h=this._map.get(e);this._map.set(e,h.push({scopes:g,binding:c,alias:_ramdaFantasy.Maybe.of(b)}))}else this._map.set(e,_immutable.List.of({scopes:g,binding:c,alias:_ramdaFantasy.Maybe.of(b)}))}get(a){return this._map.get(a.token.value)}}exports.default=BindingMap;

