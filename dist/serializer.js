"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.serializer=exports.makeDeserializer=void 0;var _transitJs=require("transit-js"),_transitJs2=_interopRequireDefault(_transitJs),_immutable=require("immutable"),_syntax=require("./syntax"),_syntax2=_interopRequireDefault(_syntax),_symbol=require("./symbol"),_tokenizer=require("shift-parser/dist/tokenizer");function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}let typeMap=[_tokenizer.TokenType.STRING,_tokenizer.TokenType.EOS,_tokenizer.TokenType.LPAREN,_tokenizer.TokenType.RPAREN,_tokenizer.TokenType.LBRACK,_tokenizer.TokenType.RBRACK,_tokenizer.TokenType.LBRACE,_tokenizer.TokenType.RBRACE,_tokenizer.TokenType.COLON,_tokenizer.TokenType.SEMICOLON,_tokenizer.TokenType.PERIOD,_tokenizer.TokenType.ELLIPSIS,_tokenizer.TokenType.ARROW,_tokenizer.TokenType.CONDITIONAL,_tokenizer.TokenType.INC,_tokenizer.TokenType.DEC,_tokenizer.TokenType.ASSIGN,_tokenizer.TokenType.ASSIGN_BIT_OR,_tokenizer.TokenType.ASSIGN_BIT_XOR,_tokenizer.TokenType.ASSIGN_BIT_AND,_tokenizer.TokenType.ASSIGN_SHL,_tokenizer.TokenType.ASSIGN_SHR,_tokenizer.TokenType.ASSIGN_SHR_UNSIGNED,_tokenizer.TokenType.ASSIGN_ADD,_tokenizer.TokenType.ASSIGN_SUB,_tokenizer.TokenType.ASSIGN_MUL,_tokenizer.TokenType.ASSIGN_DIV,_tokenizer.TokenType.ASSIGN_MOD,_tokenizer.TokenType.COMMA,_tokenizer.TokenType.OR,_tokenizer.TokenType.AND,_tokenizer.TokenType.BIT_OR,_tokenizer.TokenType.BIT_XOR,_tokenizer.TokenType.BIT_AND,_tokenizer.TokenType.SHL,_tokenizer.TokenType.SHR,_tokenizer.TokenType.SHR_UNSIGNED,_tokenizer.TokenType.ADD,_tokenizer.TokenType.SUB,_tokenizer.TokenType.MUL,_tokenizer.TokenType.DIV,_tokenizer.TokenType.MOD,_tokenizer.TokenType.EQ,_tokenizer.TokenType.NE,_tokenizer.TokenType.EQ_STRICT,_tokenizer.TokenType.NE_STRICT,_tokenizer.TokenType.LT,_tokenizer.TokenType.GT,_tokenizer.TokenType.LTE,_tokenizer.TokenType.GTE,_tokenizer.TokenType.INSTANCEOF,_tokenizer.TokenType.IN,_tokenizer.TokenType.NOT,_tokenizer.TokenType.BIT_NOT,_tokenizer.TokenType.AWAIT,_tokenizer.TokenType.DELETE,_tokenizer.TokenType.TYPEOF,_tokenizer.TokenType.VOID,_tokenizer.TokenType.BREAK,_tokenizer.TokenType.CASE,_tokenizer.TokenType.CATCH,_tokenizer.TokenType.CLASS,_tokenizer.TokenType.CONTINUE,_tokenizer.TokenType.DEBUGGER,_tokenizer.TokenType.DEFAULT,_tokenizer.TokenType.DO,_tokenizer.TokenType.ELSE,_tokenizer.TokenType.EXPORT,_tokenizer.TokenType.EXTENDS,_tokenizer.TokenType.FINALLY,_tokenizer.TokenType.FOR,_tokenizer.TokenType.FUNCTION,_tokenizer.TokenType.IF,_tokenizer.TokenType.IMPORT,_tokenizer.TokenType.LET,_tokenizer.TokenType.NEW,_tokenizer.TokenType.RETURN,_tokenizer.TokenType.SUPER,_tokenizer.TokenType.SWITCH,_tokenizer.TokenType.THIS,_tokenizer.TokenType.THROW,_tokenizer.TokenType.TRY,_tokenizer.TokenType.VAR,_tokenizer.TokenType.WHILE,_tokenizer.TokenType.WITH,_tokenizer.TokenType.NULL,_tokenizer.TokenType.TRUE,_tokenizer.TokenType.FALSE,_tokenizer.TokenType.YIELD,_tokenizer.TokenType.NUMBER,_tokenizer.TokenType.STRING,_tokenizer.TokenType.REGEXP,_tokenizer.TokenType.IDENTIFIER,_tokenizer.TokenType.CONST,_tokenizer.TokenType.TEMPLATE,_tokenizer.TokenType.ILLEGAL],ListHandler=_transitJs2.default.makeWriteHandler({tag:()=>"array",rep:a=>a}),MapHandler=_transitJs2.default.makeWriteHandler({tag:function(){return"map"},rep:function(b){return b},stringRep:function(){return null}}),SyntaxHandler=_transitJs2.default.makeWriteHandler({tag:()=>"stx",rep:a=>{if(_immutable.List.isList(a.token))return[a.token,a.scopesets];let b=_transitJs2.default.objectToMap(a.token);return b.set("type",typeMap.indexOf(a.token.type)),[b,a.scopesets]}}),SymbolHandler=_transitJs2.default.makeWriteHandler({tag:()=>"symb",rep:a=>[a.name]}),writer=_transitJs2.default.writer("json",{handlers:_transitJs2.default.map([_immutable.List,ListHandler,_immutable.Map,MapHandler,_syntax2.default,SyntaxHandler,_symbol.SymbolClass,SymbolHandler])});function makeReader(a){return _transitJs2.default.reader("json",{arrayBuilder:{init:()=>(0,_immutable.List)().asMutable(),add:(b,c)=>b.push(c),finalize:b=>b.asImmutable(),fromArray:b=>(0,_immutable.List)(b)},mapBuilder:{init:function(){return(0,_immutable.Map)().asMutable()},add:function(c,d,e){return c.set(d,e)},finalize:function(c){return c.asImmutable()}},handlers:{stx:b=>{let c=_transitJs2.default.mapToObject(b[1]);if(_immutable.List.isList(b[0])){let d=b[0];return new _syntax2.default(d,{bindings:a,scopesets:c})}let d=_transitJs2.default.mapToObject(b[0]);return d.type=typeMap[b[0].get("type")],d.slice=b[0].has("slice")?_transitJs2.default.mapToObject(b[0].get("slice")):void 0,d.slice&&(d.slice.startLocation=_transitJs2.default.mapToObject(d.slice.startLocation)),new _syntax2.default(d,{bindings:a,scopesets:c})},symb:b=>{return(0,_symbol.Symbol)(b[0])}}})}exports.makeDeserializer=makeReader,exports.serializer=writer;

