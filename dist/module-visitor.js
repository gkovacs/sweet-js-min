'use strict';Object.defineProperty(exports,'__esModule',{value:!0}),exports.bindImports=bindImports;var _loadSyntax=require('./load-syntax'),_ramda=require('ramda'),_=_interopRequireWildcard(_ramda),_sweetSpec=require('sweet-spec'),T=_interopRequireWildcard(_sweetSpec),_sweetSpecUtils=require('./sweet-spec-utils'),S=_interopRequireWildcard(_sweetSpecUtils),_symbol=require('./symbol'),_transforms=require('./transforms'),_hygieneUtils=require('./hygiene-utils'),_sweetModule=require('./sweet-module'),_sweetModule2=_interopRequireDefault(_sweetModule),_immutable=require('immutable'),_sweetToShiftReducer=require('./sweet-to-shift-reducer'),_sweetToShiftReducer2=_interopRequireDefault(_sweetToShiftReducer),_shiftCodegen=require('shift-codegen'),_shiftCodegen2=_interopRequireDefault(_shiftCodegen);function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(b[c]=a[c]);return b.default=a,b}function bindImports(a,b,c,d){let e=[],f=a.forSyntax?c+1:c;if(null!=a.defaultBinding){let g=b.exportedNames.find(i=>'_default'===i.exportedName.val()),h=a.defaultBinding.name;if(null!=g){let i=(0,_symbol.gensym)('_default'),j=g.exportedName;d.bindings.addForward(h,j,i,f),e.push(h)}}if(a.namedImports&&a.namedImports.forEach(g=>{let h=g.binding.name,i=b.exportedNames.find(j=>j.exportedName.val()===h.val());if(null!=i){let j=(0,_symbol.gensym)(h.val()),k=i.name?i.name:i.exportedName;d.bindings.addForward(h,k,j,f),e.push(h)}}),a.namespaceBinding){let g=a.namespaceBinding.name,h=(0,_symbol.gensym)(g.val());d.store.set(h.toString(),new _transforms.ModuleNamespaceTransform(g,b)),d.bindings.add(g,{binding:h,phase:f,skipDup:!1}),e.push(g)}return(0,_immutable.List)(e)}exports.default=class{constructor(a){this.context=a}visit(a,b,c){a.imports.forEach(d=>{if(d.forSyntax){let e=this.context.loader.get(d.moduleSpecifier.val(),b+1,'');this.visit(e,b+1,c),this.invoke(e,b+1,c)}else{let e=this.context.loader.get(d.moduleSpecifier.val(),b,'');this.visit(e,b,c)}bindImports(d,a,b,this.context)});for(let d of a.compiletimeItems())S.isSyntaxDeclarationStatement(d)&&this.registerSyntaxDeclaration(d.declaration,b,c);return c}invoke(a,b,c){a.imports.forEach(h=>{if(!h.forSyntax){let i=this.context.loader.get(h.moduleSpecifier.val(),b,'');this.invoke(i,b,c),bindImports(h,i,b,this.context)}});let d=a.runtimeItems();for(let h of d)S.isVariableDeclarationStatement(h)?this.registerVariableDeclaration(h.declaration,b,c):S.isFunctionDeclaration(h)&&this.registerFunctionOrClass(h,b,c);let e=new T.Module({directives:(0,_immutable.List)(),items:d}).reduce(new _sweetToShiftReducer2.default(b)),f=(0,_shiftCodegen2.default)(e,new _shiftCodegen.FormattedCodeGen),g=this.context.transform(f);return this.context.loader.eval(g.code,c),c}registerSyntaxDeclaration(a,b,c){a.declarators.forEach(d=>{let e=(0,_loadSyntax.evalCompiletimeValue)(d.init,_.merge(this.context,{phase:b+1,store:c}));(0,_hygieneUtils.collectBindings)(d.binding).forEach(f=>{if(0!==b){let h=(0,_symbol.gensym)(f.val());this.context.bindings.add(f,{binding:h,phase:b,skipDup:!1})}let g=f.resolve(b);c.set(g,new _transforms.CompiletimeTransform(e))})})}registerVariableDeclaration(a,b){a.declarators.forEach(d=>{(0,_hygieneUtils.collectBindings)(d.binding).forEach(e=>{if(0!==b){let f=(0,_symbol.gensym)(e.val());this.context.bindings.add(e,{binding:f,phase:b,skipDup:'var'===a.kind})}})})}registerFunctionOrClass(a,b){(0,_hygieneUtils.collectBindings)(a.name).forEach(d=>{if(0!==b){let e=(0,_symbol.gensym)(d.val());this.context.bindings.add(d,{binding:e,phase:b,skipDup:!1})}})}};

