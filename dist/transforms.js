'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CompiletimeTransform = exports.VarBindingTransform = exports.ModuleNamespaceTransform = exports.ReturnStatementTransform = exports.SyntaxDeclTransform = exports.SyntaxrecDeclTransform = exports.DebuggerTransform = exports.WithTransform = exports.DoTransform = exports.ContinueTransform = exports.BreakTransform = exports.SwitchTransform = exports.ForTransform = exports.IfTransform = exports.WhileTransform = exports.TryTransform = exports.ConstDeclTransform = exports.LetDeclTransform = exports.ThrowTransform = exports.NewTransform = exports.VariableDeclTransform = exports.FunctionDeclTransform = undefined;

var _sweetModule = require('./sweet-module');

var _sweetModule2 = _interopRequireDefault(_sweetModule);

var _syntax = require('./syntax');

var _syntax2 = _interopRequireDefault(_syntax);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class FunctionDeclTransform {}
exports.FunctionDeclTransform = FunctionDeclTransform;
class VariableDeclTransform {}
exports.VariableDeclTransform = VariableDeclTransform;
class NewTransform {}
exports.NewTransform = NewTransform;
class ThrowTransform {}
exports.ThrowTransform = ThrowTransform;
class LetDeclTransform {}
exports.LetDeclTransform = LetDeclTransform;
class ConstDeclTransform {}
exports.ConstDeclTransform = ConstDeclTransform;
class TryTransform {}
exports.TryTransform = TryTransform;
class WhileTransform {}
exports.WhileTransform = WhileTransform;
class IfTransform {}
exports.IfTransform = IfTransform;
class ForTransform {}
exports.ForTransform = ForTransform;
class SwitchTransform {}
exports.SwitchTransform = SwitchTransform;
class BreakTransform {}
exports.BreakTransform = BreakTransform;
class ContinueTransform {}
exports.ContinueTransform = ContinueTransform;
class DoTransform {}
exports.DoTransform = DoTransform;
class WithTransform {}
exports.WithTransform = WithTransform;
class DebuggerTransform {}
exports.DebuggerTransform = DebuggerTransform;
class SyntaxrecDeclTransform {}
exports.SyntaxrecDeclTransform = SyntaxrecDeclTransform;
class SyntaxDeclTransform {}
exports.SyntaxDeclTransform = SyntaxDeclTransform;
class ReturnStatementTransform {}
exports.ReturnStatementTransform = ReturnStatementTransform;
class ModuleNamespaceTransform {

  constructor(namespace, mod) {
    this.namespace = namespace;
    this.mod = mod;
  }
}
exports.ModuleNamespaceTransform = ModuleNamespaceTransform;
class VarBindingTransform {

  constructor(id) {
    this.id = id;
  }
}
exports.VarBindingTransform = VarBindingTransform;
class CompiletimeTransform {

  constructor(value) {
    this.value = value;
  }
}
exports.CompiletimeTransform = CompiletimeTransform;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc2Zvcm1zLmpzIl0sIm5hbWVzIjpbIkZ1bmN0aW9uRGVjbFRyYW5zZm9ybSIsIlZhcmlhYmxlRGVjbFRyYW5zZm9ybSIsIk5ld1RyYW5zZm9ybSIsIlRocm93VHJhbnNmb3JtIiwiTGV0RGVjbFRyYW5zZm9ybSIsIkNvbnN0RGVjbFRyYW5zZm9ybSIsIlRyeVRyYW5zZm9ybSIsIldoaWxlVHJhbnNmb3JtIiwiSWZUcmFuc2Zvcm0iLCJGb3JUcmFuc2Zvcm0iLCJTd2l0Y2hUcmFuc2Zvcm0iLCJCcmVha1RyYW5zZm9ybSIsIkNvbnRpbnVlVHJhbnNmb3JtIiwiRG9UcmFuc2Zvcm0iLCJXaXRoVHJhbnNmb3JtIiwiRGVidWdnZXJUcmFuc2Zvcm0iLCJTeW50YXhyZWNEZWNsVHJhbnNmb3JtIiwiU3ludGF4RGVjbFRyYW5zZm9ybSIsIlJldHVyblN0YXRlbWVudFRyYW5zZm9ybSIsIk1vZHVsZU5hbWVzcGFjZVRyYW5zZm9ybSIsImNvbnN0cnVjdG9yIiwibmFtZXNwYWNlIiwibW9kIiwiVmFyQmluZGluZ1RyYW5zZm9ybSIsImlkIiwiQ29tcGlsZXRpbWVUcmFuc2Zvcm0iLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVPLE1BQU1BLHFCQUFOLENBQTRCO1FBQXRCQSxxQixHQUFBQSxxQjtBQUNOLE1BQU1DLHFCQUFOLENBQTRCO1FBQXRCQSxxQixHQUFBQSxxQjtBQUNOLE1BQU1DLFlBQU4sQ0FBbUI7UUFBYkEsWSxHQUFBQSxZO0FBQ04sTUFBTUMsY0FBTixDQUFxQjtRQUFmQSxjLEdBQUFBLGM7QUFDTixNQUFNQyxnQkFBTixDQUF1QjtRQUFqQkEsZ0IsR0FBQUEsZ0I7QUFDTixNQUFNQyxrQkFBTixDQUF5QjtRQUFuQkEsa0IsR0FBQUEsa0I7QUFDTixNQUFNQyxZQUFOLENBQW1CO1FBQWJBLFksR0FBQUEsWTtBQUNOLE1BQU1DLGNBQU4sQ0FBcUI7UUFBZkEsYyxHQUFBQSxjO0FBQ04sTUFBTUMsV0FBTixDQUFrQjtRQUFaQSxXLEdBQUFBLFc7QUFDTixNQUFNQyxZQUFOLENBQW1CO1FBQWJBLFksR0FBQUEsWTtBQUNOLE1BQU1DLGVBQU4sQ0FBc0I7UUFBaEJBLGUsR0FBQUEsZTtBQUNOLE1BQU1DLGNBQU4sQ0FBcUI7UUFBZkEsYyxHQUFBQSxjO0FBQ04sTUFBTUMsaUJBQU4sQ0FBd0I7UUFBbEJBLGlCLEdBQUFBLGlCO0FBQ04sTUFBTUMsV0FBTixDQUFrQjtRQUFaQSxXLEdBQUFBLFc7QUFDTixNQUFNQyxhQUFOLENBQW9CO1FBQWRBLGEsR0FBQUEsYTtBQUNOLE1BQU1DLGlCQUFOLENBQXdCO1FBQWxCQSxpQixHQUFBQSxpQjtBQUNOLE1BQU1DLHNCQUFOLENBQTZCO1FBQXZCQSxzQixHQUFBQSxzQjtBQUNOLE1BQU1DLG1CQUFOLENBQTBCO1FBQXBCQSxtQixHQUFBQSxtQjtBQUNOLE1BQU1DLHdCQUFOLENBQStCO1FBQXpCQSx3QixHQUFBQSx3QjtBQUNOLE1BQU1DLHdCQUFOLENBQStCOztBQUlwQ0MsY0FBWUMsU0FBWixFQUErQkMsR0FBL0IsRUFBaUQ7QUFDL0MsU0FBS0QsU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxTQUFLQyxHQUFMLEdBQVdBLEdBQVg7QUFDRDtBQVBtQztRQUF6Qkgsd0IsR0FBQUEsd0I7QUFTTixNQUFNSSxtQkFBTixDQUEwQjs7QUFHL0JILGNBQVlJLEVBQVosRUFBd0I7QUFDdEIsU0FBS0EsRUFBTCxHQUFVQSxFQUFWO0FBQ0Q7QUFMOEI7UUFBcEJELG1CLEdBQUFBLG1CO0FBT04sTUFBTUUsb0JBQU4sQ0FBMkI7O0FBR2hDTCxjQUFZTSxLQUFaLEVBQXdCO0FBQ3RCLFNBQUtBLEtBQUwsR0FBYUEsS0FBYjtBQUNEO0FBTCtCO1FBQXJCRCxvQixHQUFBQSxvQiIsImZpbGUiOiJ0cmFuc2Zvcm1zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbmltcG9ydCBTd2VldE1vZHVsZSBmcm9tICcuL3N3ZWV0LW1vZHVsZSc7XG5pbXBvcnQgU3ludGF4IGZyb20gJy4vc3ludGF4JztcblxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uRGVjbFRyYW5zZm9ybSB7IH1cbmV4cG9ydCBjbGFzcyBWYXJpYWJsZURlY2xUcmFuc2Zvcm0geyB9XG5leHBvcnQgY2xhc3MgTmV3VHJhbnNmb3JtIHsgfVxuZXhwb3J0IGNsYXNzIFRocm93VHJhbnNmb3JtIHsgfVxuZXhwb3J0IGNsYXNzIExldERlY2xUcmFuc2Zvcm0geyB9XG5leHBvcnQgY2xhc3MgQ29uc3REZWNsVHJhbnNmb3JtIHsgfVxuZXhwb3J0IGNsYXNzIFRyeVRyYW5zZm9ybSB7IH1cbmV4cG9ydCBjbGFzcyBXaGlsZVRyYW5zZm9ybSB7IH1cbmV4cG9ydCBjbGFzcyBJZlRyYW5zZm9ybSB7IH1cbmV4cG9ydCBjbGFzcyBGb3JUcmFuc2Zvcm0geyB9XG5leHBvcnQgY2xhc3MgU3dpdGNoVHJhbnNmb3JtIHsgfVxuZXhwb3J0IGNsYXNzIEJyZWFrVHJhbnNmb3JtIHsgfVxuZXhwb3J0IGNsYXNzIENvbnRpbnVlVHJhbnNmb3JtIHsgfVxuZXhwb3J0IGNsYXNzIERvVHJhbnNmb3JtIHsgfVxuZXhwb3J0IGNsYXNzIFdpdGhUcmFuc2Zvcm0geyB9XG5leHBvcnQgY2xhc3MgRGVidWdnZXJUcmFuc2Zvcm0geyB9XG5leHBvcnQgY2xhc3MgU3ludGF4cmVjRGVjbFRyYW5zZm9ybSB7IH1cbmV4cG9ydCBjbGFzcyBTeW50YXhEZWNsVHJhbnNmb3JtIHsgfVxuZXhwb3J0IGNsYXNzIFJldHVyblN0YXRlbWVudFRyYW5zZm9ybSB7IH1cbmV4cG9ydCBjbGFzcyBNb2R1bGVOYW1lc3BhY2VUcmFuc2Zvcm0ge1xuICBuYW1lc3BhY2U6IFN5bnRheDtcbiAgbW9kOiBTd2VldE1vZHVsZTtcblxuICBjb25zdHJ1Y3RvcihuYW1lc3BhY2U6IFN5bnRheCwgbW9kOiBTd2VldE1vZHVsZSkge1xuICAgIHRoaXMubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICAgIHRoaXMubW9kID0gbW9kO1xuICB9XG59XG5leHBvcnQgY2xhc3MgVmFyQmluZGluZ1RyYW5zZm9ybSB7XG4gIGlkOiBTeW50YXg7XG4gIFxuICBjb25zdHJ1Y3RvcihpZDogU3ludGF4KSB7XG4gICAgdGhpcy5pZCA9IGlkO1xuICB9XG59XG5leHBvcnQgY2xhc3MgQ29tcGlsZXRpbWVUcmFuc2Zvcm0ge1xuICB2YWx1ZTogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHZhbHVlOiBhbnkpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cbn1cbiJdfQ==