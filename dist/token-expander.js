'use strict';Object.defineProperty(exports,'__esModule',{value:!0});var _sweetSpec=require('sweet-spec'),S=_interopRequireWildcard(_sweetSpec),_immutable=require('immutable'),_enforester=require('./enforester'),_termExpander=require('./term-expander.js'),_termExpander2=_interopRequireDefault(_termExpander),_env=require('./env'),_env2=_interopRequireDefault(_env),_ramda=require('ramda'),_=_interopRequireWildcard(_ramda),_terms=require('./terms'),T=_interopRequireWildcard(_terms),_symbol=require('./symbol'),_transforms=require('./transforms'),_loadSyntax=require('./load-syntax'),_scope=require('./scope'),_syntax=require('./syntax'),_astDispatcher=require('./ast-dispatcher'),_astDispatcher2=_interopRequireDefault(_astDispatcher),_syntax2=require('./syntax.js'),_syntax3=_interopRequireDefault(_syntax2),_scopeReducer=require('./scope-reducer'),_scopeReducer2=_interopRequireDefault(_scopeReducer),_moduleVisitor=require('./module-visitor'),_moduleVisitor2=_interopRequireDefault(_moduleVisitor);function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(b[c]=a[c]);return b.default=a,b}class RegisterBindingsReducer extends S.default.CloneReducer{constructor(a,b,c,d,e){super(),this.useScope=a,this.phase=b,this.bindings=d,this.skipDup=c,this.env=e}reduceBindingIdentifier(a,b){let c=b.name.removeScope(this.useScope,this.phase),d=(0,_symbol.gensym)(c.val());return this.bindings.add(c,{binding:d,phase:this.phase,skipDup:this.skipDup}),this.env.set(d.toString(),new _transforms.VarBindingTransform(c)),a.extend({name:c})}}class RegisterSyntaxBindingsReducer extends S.default.CloneReducer{constructor(a,b,c,d,e){super(),this.useScope=a,this.phase=b,this.bindings=c,this.env=d,this.val=e}reduceBindingIdentifier(a,b){let c=b.name.removeScope(this.useScope,this.phase),d=(0,_symbol.gensym)(c.val());this.bindings.add(c,{binding:d,phase:this.phase,skipDup:!1});let e=c.resolve(this.phase);return this.env.set(e,new _transforms.CompiletimeTransform(this.val)),a.extend({name:c})}}class TokenExpander extends _astDispatcher2.default{constructor(a){super('expand',!1),this.context=a}expand(a){let b=[];if(0===a.size)return(0,_immutable.List)(b);let c=(0,_immutable.List)(),d=new _enforester.Enforester(a,c,this.context);for(;!d.done;)b.push(this.dispatch(d.enforest()));return(0,_immutable.List)(b)}expandVariableDeclarationStatement(a){return a.extend({declaration:this.registerVariableDeclaration(a.declaration)})}expandFunctionDeclaration(a){return this.registerFunctionOrClass(a)}registerImport(a){let c,b=a.moduleSpecifier.val(),d=new _moduleVisitor2.default(this.context);return a.forSyntax?(c=this.context.loader.get(b,this.context.phase+1,this.context.cwd),this.context.store=d.visit(c,this.context.phase+1,this.context.store),this.context.store=d.invoke(c,this.context.phase+1,this.context.store)):(c=this.context.loader.get(b,this.context.phase,this.context.cwd),this.context.store=d.visit(c,this.context.phase,this.context.store)),(0,_moduleVisitor.bindImports)(a,c,this.context.phase,this.context),a}expandImport(a){return this.registerImport(a)}expandImportNamespace(a){return this.registerImport(a)}expandExport(a){if(T.isFunctionDeclaration(a.declaration)||T.isClassDeclaration(a.declaration))return a.extend({declaration:this.registerFunctionOrClass(a.declaration)});return T.isVariableDeclaration(a.declaration)?a.extend({declaration:this.registerVariableDeclaration(a.declaration)}):a}registerFunctionOrClass(a){let b=new RegisterBindingsReducer(this.context.useScope,this.context.phase,!1,this.context.bindings,this.context.env);return a.extend({name:a.name.reduce(b)})}registerVariableDeclaration(a){if('syntax'===a.kind||'syntaxrec'===a.kind)return this.registerSyntaxDeclaration(a);let b=new RegisterBindingsReducer(this.context.useScope,this.context.phase,'var'===a.kind,this.context.bindings,this.context.env);return a.extend({declarators:a.declarators.map(c=>{return c.extend({binding:c.binding.reduce(b)})})})}registerSyntaxDeclaration(a){if('syntax'===a.kind){let b=(0,_scope.freshScope)('nonrec'),c=new _scopeReducer2.default([{scope:b,phase:_syntax.ALL_PHASES,flip:!1}],this.context.bindings);a=a.extend({declarators:a.declarators.map(d=>{let e=d.binding.name,f=e.addScope(b,this.context.bindings,_syntax.ALL_PHASES),g=e.removeScope(this.context.currentScope[this.context.currentScope.length-1],this.context.phase),h=(0,_symbol.gensym)(e.val());return this.context.bindings.addForward(f,g,h,this.context.phase),d.extend({init:d.init.reduce(c)})})})}return a.extend({declarators:a.declarators.map(b=>{let c=new _termExpander2.default(_.merge(this.context,{phase:this.context.phase+1,env:new _env2.default,store:this.context.store})),d=c.expand(b.init),e=(0,_loadSyntax.evalCompiletimeValue)(d,_.merge(this.context,{phase:this.context.phase+1})),f=new RegisterSyntaxBindingsReducer(this.context.useScope,this.context.phase,this.context.bindings,this.context.env,e);return b.extend({binding:b.binding.reduce(f),init:d})})})}}exports.default=TokenExpander;

