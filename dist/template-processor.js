'use strict';Object.defineProperty(exports,'__esModule',{value:!0}),exports.processTemplate=processTemplate,exports.replaceTemplate=replaceTemplate;var _immutable=require('immutable'),_ramda=require('ramda'),_ramda2=_interopRequireDefault(_ramda),_errors=require('./errors'),_sweetSpec=require('sweet-spec'),T=_interopRequireWildcard(_sweetSpec),_syntax=require('./syntax'),_syntax2=_interopRequireDefault(_syntax);function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(b[c]=a[c]);return b.default=a,b}function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}const isDolar=a=>a instanceof T.RawSyntax&&'function'==typeof a.value.match&&a.value.match('identifier')&&'$'===a.value.val(),isDelimiter=a=>a instanceof T.RawDelimiter,isBraces=a=>a instanceof T.RawDelimiter&&'braces'===a.kind,isParens=a=>a instanceof T.RawDelimiter&&'parens'===a.kind,isBrackets=a=>a instanceof T.RawDelimiter&&'brackets'===a.kind,mkDelimiter=(a,b,c)=>{return new T.RawDelimiter({kind:a,inner:_immutable.List.of(c.inner.first()).concat(b).concat(c.inner.last())})},insertIntoDelimiter=_ramda2.default.cond([[isBraces,(a,b)=>mkDelimiter('braces',b,a)],[isParens,(a,b)=>mkDelimiter('parens',b,a)],[isBrackets,(a,b)=>mkDelimiter('brackets',b,a)]]),process=(a,b)=>{if(isBraces(b)&&isDolar(a.template.last())){let c=_syntax2.default.fromNumber(a.interp.size,b.inner.first().value);return{template:a.template.push(mkDelimiter('braces',_immutable.List.of(new T.RawSyntax({value:c})),b)),interp:a.interp.push(b.inner.slice(1,b.inner.size-1))}}if(isDelimiter(b)){let c=processTemplate(b.inner.slice(1,b.inner.size-1),a.interp);return{template:a.template.push(insertIntoDelimiter(b,c.template)),interp:c.interp}}return{template:a.template.push(b),interp:a.interp}};function getLineNumber(a){return a instanceof T.RawSyntax?a.value.lineNumber():a.inner.first().value.lineNumber()}function setLineNumber(a,b){if(a instanceof T.RawSyntax)return a.extend({value:a.value.setLineNumber(b)});return a instanceof T.RawDelimiter?a.extend({inner:a.inner.map(c=>setLineNumber(c,b))}):_immutable.List.isList(a)?a.map(c=>setLineNumber(c,b)):a}function cloneLineNumber(a,b){return b&&a?setLineNumber(a,getLineNumber(b)):a}const replace=(a,b)=>{let c=a.template.get(-1),d=a.template.get(-2);if(isBraces(b)&&isDolar(c)){let e=b.inner.get(1).value.val();(0,_errors.assert)(a.rep.size>e,'unknown replacement value');let f=cloneLineNumber(a.rep.get(e),d);return{template:a.template.pop().concat(f),rep:a.rep}}if(isDelimiter(b)){let e=replaceTemplate(b.inner.slice(1,b.inner.size-1),a.rep);return{template:a.template.push(insertIntoDelimiter(b,e)),rep:a.rep}}return{template:a.template.push(b),rep:a.rep}};function processTemplate(a,b=(0,_immutable.List)()){return a.reduce(process,{template:(0,_immutable.List)(),interp:b})}function replaceTemplate(a,b){return a.reduce(replace,{template:(0,_immutable.List)(),rep:b}).template}

