'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _sweetLoader = require('./sweet-loader');

var _sweetLoader2 = _interopRequireDefault(_sweetLoader);

var _fs = require('fs');

var _path = require('path');

var _resolve = require('resolve');

var _resolve2 = _interopRequireDefault(_resolve);

var _vm = require('vm');

var _vm2 = _interopRequireDefault(_vm);

var _store = require('./store');

var _store2 = _interopRequireDefault(_store);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class NodeLoader extends _sweetLoader2.default {

  constructor(baseDir, extensions) {
    super(baseDir);
    this.extensions = extensions;
  }

  normalize(name, refererName, refererAddress) {
    let normName = super.normalize(name, refererName, refererAddress);
    let match = normName.match(_sweetLoader.phaseInModulePathRegexp);
    if (match && match.length >= 3) {
      let resolvedName = _resolve2.default.sync(match[1], {
        basedir: refererName ? (0, _path.dirname)(refererName) : this.baseDir,
        extensions: this.extensions ? this.extensions : ['.js']
      });
      return `${ resolvedName }:${ match[2] }`;
    }
    throw new Error(`Module ${ name } is missing phase information`);
  }

  fetch({ name, address, metadata }) {
    let src = this.sourceCache.get(address.path);
    if (src != null) {
      return src;
    } else {
      src = (0, _fs.readFileSync)(address.path, 'utf8');
      this.sourceCache.set(address.path, src);
      return src;
    }
  }

  freshStore() {
    let sandbox = {
      process: global.process,
      console: global.console
    };
    return new _store2.default(_vm2.default.createContext(sandbox));
  }

  eval(source, store) {
    return _vm2.default.runInContext(source, store.getBackingObject());
  }
}
exports.default = NodeLoader;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlLWxvYWRlci5qcyJdLCJuYW1lcyI6WyJOb2RlTG9hZGVyIiwiY29uc3RydWN0b3IiLCJiYXNlRGlyIiwiZXh0ZW5zaW9ucyIsIm5vcm1hbGl6ZSIsIm5hbWUiLCJyZWZlcmVyTmFtZSIsInJlZmVyZXJBZGRyZXNzIiwibm9ybU5hbWUiLCJtYXRjaCIsImxlbmd0aCIsInJlc29sdmVkTmFtZSIsInN5bmMiLCJiYXNlZGlyIiwiRXJyb3IiLCJmZXRjaCIsImFkZHJlc3MiLCJtZXRhZGF0YSIsInNyYyIsInNvdXJjZUNhY2hlIiwiZ2V0IiwicGF0aCIsInNldCIsImZyZXNoU3RvcmUiLCJzYW5kYm94IiwicHJvY2VzcyIsImdsb2JhbCIsImNvbnNvbGUiLCJjcmVhdGVDb250ZXh0IiwiZXZhbCIsInNvdXJjZSIsInN0b3JlIiwicnVuSW5Db250ZXh0IiwiZ2V0QmFja2luZ09iamVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVlLE1BQU1BLFVBQU4sK0JBQXFDOztBQUdsREMsY0FBWUMsT0FBWixFQUE2QkMsVUFBN0IsRUFBb0Q7QUFDbEQsVUFBTUQsT0FBTjtBQUNBLFNBQUtDLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0Q7O0FBRURDLFlBQVVDLElBQVYsRUFBd0JDLFdBQXhCLEVBQThDQyxjQUE5QyxFQUF1RTtBQUNyRSxRQUFJQyxXQUFXLE1BQU1KLFNBQU4sQ0FBZ0JDLElBQWhCLEVBQXNCQyxXQUF0QixFQUFtQ0MsY0FBbkMsQ0FBZjtBQUNBLFFBQUlFLFFBQVFELFNBQVNDLEtBQVQsc0NBQVo7QUFDQSxRQUFJQSxTQUFTQSxNQUFNQyxNQUFOLElBQWdCLENBQTdCLEVBQWdDO0FBQzlCLFVBQUlDLGVBQWUsa0JBQVFDLElBQVIsQ0FBYUgsTUFBTSxDQUFOLENBQWIsRUFBdUI7QUFDeENJLGlCQUFTUCxjQUFjLG1CQUFRQSxXQUFSLENBQWQsR0FBcUMsS0FBS0osT0FEWDtBQUV4Q0Msb0JBQVksS0FBS0EsVUFBTCxHQUFrQixLQUFLQSxVQUF2QixHQUFvQyxDQUFFLEtBQUY7QUFGUixPQUF2QixDQUFuQjtBQUlBLGFBQVEsSUFBRVEsWUFBYSxNQUFHRixNQUFNLENBQU4sQ0FBUyxHQUFuQztBQUNEO0FBQ0QsVUFBTSxJQUFJSyxLQUFKLENBQVcsV0FBU1QsSUFBSyxnQ0FBekIsQ0FBTjtBQUNEOztBQUVEVSxRQUFNLEVBQUNWLElBQUQsRUFBT1csT0FBUCxFQUFnQkMsUUFBaEIsRUFBTixFQUF1RztBQUNyRyxRQUFJQyxNQUFNLEtBQUtDLFdBQUwsQ0FBaUJDLEdBQWpCLENBQXFCSixRQUFRSyxJQUE3QixDQUFWO0FBQ0EsUUFBSUgsT0FBTyxJQUFYLEVBQWlCO0FBQ2YsYUFBT0EsR0FBUDtBQUNELEtBRkQsTUFFTztBQUNMQSxZQUFNLHNCQUFhRixRQUFRSyxJQUFyQixFQUEyQixNQUEzQixDQUFOO0FBQ0EsV0FBS0YsV0FBTCxDQUFpQkcsR0FBakIsQ0FBcUJOLFFBQVFLLElBQTdCLEVBQW1DSCxHQUFuQztBQUNBLGFBQU9BLEdBQVA7QUFDRDtBQUNGOztBQUVESyxlQUFhO0FBQ1gsUUFBSUMsVUFBVTtBQUNaQyxlQUFTQyxPQUFPRCxPQURKO0FBRVpFLGVBQVNELE9BQU9DO0FBRkosS0FBZDtBQUlBLFdBQU8sb0JBQVUsYUFBR0MsYUFBSCxDQUFpQkosT0FBakIsQ0FBVixDQUFQO0FBQ0Q7O0FBRURLLE9BQUtDLE1BQUwsRUFBcUJDLEtBQXJCLEVBQW1DO0FBQ2pDLFdBQU8sYUFBR0MsWUFBSCxDQUFnQkYsTUFBaEIsRUFBd0JDLE1BQU1FLGdCQUFOLEVBQXhCLENBQVA7QUFDRDtBQTFDaUQ7a0JBQS9CakMsVSIsImZpbGUiOiJub2RlLWxvYWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5pbXBvcnQgU3dlZXRMb2FkZXIsIHsgcGhhc2VJbk1vZHVsZVBhdGhSZWdleHAgfSBmcm9tICcuL3N3ZWV0LWxvYWRlcic7XG5pbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7XG5pbXBvcnQgeyBkaXJuYW1lIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgcmVzb2x2ZSBmcm9tICdyZXNvbHZlJztcbmltcG9ydCB2bSBmcm9tICd2bSc7XG5pbXBvcnQgU3RvcmUgZnJvbSAnLi9zdG9yZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vZGVMb2FkZXIgZXh0ZW5kcyBTd2VldExvYWRlciB7XG4gIGV4dGVuc2lvbnM6ID9zdHJpbmdbXTtcblxuICBjb25zdHJ1Y3RvcihiYXNlRGlyOiBzdHJpbmcsIGV4dGVuc2lvbnM/OiBzdHJpbmdbXSkge1xuICAgIHN1cGVyKGJhc2VEaXIpO1xuICAgIHRoaXMuZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnM7XG4gIH1cblxuICBub3JtYWxpemUobmFtZTogc3RyaW5nLCByZWZlcmVyTmFtZT86IHN0cmluZywgcmVmZXJlckFkZHJlc3M/OiBzdHJpbmcpIHtcbiAgICBsZXQgbm9ybU5hbWUgPSBzdXBlci5ub3JtYWxpemUobmFtZSwgcmVmZXJlck5hbWUsIHJlZmVyZXJBZGRyZXNzKTtcbiAgICBsZXQgbWF0Y2ggPSBub3JtTmFtZS5tYXRjaChwaGFzZUluTW9kdWxlUGF0aFJlZ2V4cCk7XG4gICAgaWYgKG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+PSAzKSB7XG4gICAgICBsZXQgcmVzb2x2ZWROYW1lID0gcmVzb2x2ZS5zeW5jKG1hdGNoWzFdLCB7XG4gICAgICAgIGJhc2VkaXI6IHJlZmVyZXJOYW1lID8gZGlybmFtZShyZWZlcmVyTmFtZSkgOiB0aGlzLmJhc2VEaXIsXG4gICAgICAgIGV4dGVuc2lvbnM6IHRoaXMuZXh0ZW5zaW9ucyA/IHRoaXMuZXh0ZW5zaW9ucyA6IFsgJy5qcycgXVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYCR7cmVzb2x2ZWROYW1lfToke21hdGNoWzJdfWA7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgTW9kdWxlICR7bmFtZX0gaXMgbWlzc2luZyBwaGFzZSBpbmZvcm1hdGlvbmApO1xuICB9XG5cbiAgZmV0Y2goe25hbWUsIGFkZHJlc3MsIG1ldGFkYXRhfToge25hbWU6IHN0cmluZywgYWRkcmVzczoge3BhdGg6IHN0cmluZywgcGhhc2U6IG51bWJlcn0sIG1ldGFkYXRhOiB7fX0pIHtcbiAgICBsZXQgc3JjID0gdGhpcy5zb3VyY2VDYWNoZS5nZXQoYWRkcmVzcy5wYXRoKTtcbiAgICBpZiAoc3JjICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBzcmM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNyYyA9IHJlYWRGaWxlU3luYyhhZGRyZXNzLnBhdGgsICd1dGY4Jyk7XG4gICAgICB0aGlzLnNvdXJjZUNhY2hlLnNldChhZGRyZXNzLnBhdGgsIHNyYyk7XG4gICAgICByZXR1cm4gc3JjO1xuICAgIH1cbiAgfVxuXG4gIGZyZXNoU3RvcmUoKSB7XG4gICAgbGV0IHNhbmRib3ggPSB7XG4gICAgICBwcm9jZXNzOiBnbG9iYWwucHJvY2VzcyxcbiAgICAgIGNvbnNvbGU6IGdsb2JhbC5jb25zb2xlXG4gICAgfTtcbiAgICByZXR1cm4gbmV3IFN0b3JlKHZtLmNyZWF0ZUNvbnRleHQoc2FuZGJveCkpO1xuICB9XG5cbiAgZXZhbChzb3VyY2U6IHN0cmluZywgc3RvcmU6IFN0b3JlKSB7XG4gICAgcmV0dXJuIHZtLnJ1bkluQ29udGV4dChzb3VyY2UsIHN0b3JlLmdldEJhY2tpbmdPYmplY3QoKSk7XG4gIH1cbn1cbiJdfQ==