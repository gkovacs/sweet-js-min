"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.isImportDeclaration=exports.isCompiletimeStatement=exports.isCompiletimeDeclaration=exports.isSyntaxDeclarationStatement=exports.isExportSyntax=exports.isParenthesizedExpression=exports.isFunctionWithName=exports.isFunctionTerm=exports.isSyntaxrecDeclaration=exports.isSyntaxDeclaration=exports.isEOF=exports.isVariableDeclarator=exports.isVariableDeclaration=exports.isSyntaxTemplate=exports.isTemplateElement=exports.isSwitchDefault=exports.isSwitchCase=exports.isSuper=exports.isSpreadElement=exports.isScript=exports.isFunctionDeclaration=exports.isFunctionBody=exports.isFormalParameters=exports.isDirective=exports.isCatchClause=exports.isBlock=exports.isPragma=exports.isWithStatement=exports.isWhileStatement=exports.isVariableDeclarationStatement=exports.isTryFinallyStatement=exports.isTryCatchStatement=exports.isThrowStatement=exports.isSwitchStatementWithDefault=exports.isSwitchStatement=exports.isReturnStatement=exports.isLabeledStatement=exports.isIfStatement=exports.isForStatement=exports.isForOfStatement=exports.isForInStatement=exports.isExpressionStatement=exports.isEmptyStatement=exports.isDoWhileStatement=exports.isDebuggerStatement=exports.isCompoundAssignmentExpression=exports.isContinueStatement=exports.isBreakStatement=exports.isBlockStatement=exports.isYieldGeneratorExpression=exports.isYieldExpression=exports.isUpdateExpression=exports.isThisExpression=exports.isTemplateExpression=exports.isStaticMemberExpression=exports.isUnaryExpression=exports.isObjectExpression=exports.isNewTargetExpression=exports.isNewExpression=exports.isIdentifierExpression=exports.isFunctionExpression=exports.isConditionalExpression=exports.isComputedMemberExpression=exports.isComputedAssignmentExpression=exports.isCallExpression=exports.isBinaryExpression=exports.isAssignmentExpression=exports.isArrowExpression=exports.isArrayExpression=exports.isLiteralStringExpression=exports.isLiteralRegExpExpression=exports.isLiteralNumericExpression=exports.isLiteralNullExpression=exports.isLiteralInfinityExpression=exports.isLiteralBooleanExpression=exports.isStaticPropertyName=exports.isComputedPropertyName=exports.isShorthandProperty=exports.isDataProperty=exports.isSetter=exports.isGetter=exports.isMethod=exports.isExportSpecifier=exports.isExportDefault=exports.isExport=exports.isExportFrom=exports.isExportAllFrom=exports.isImportSpecifier=exports.isImportNamespace=exports.isImport=exports.isModule=exports.isClassElement=exports.isClassDeclaration=exports.isClassExpression=exports.isBindingPropertyProperty=exports.isBindingPropertyIdentifier=exports.isObjectBinding=exports.isArrayBinding=exports.isBindingIdentifier=exports.isBindingWithDefault=void 0;var _immutable=require("immutable"),_ramda=require("ramda"),R=_interopRequireWildcard(_ramda),_sweetSpec=require("sweet-spec"),_sweetSpec2=_interopRequireDefault(_sweetSpec);function _interopRequireDefault(b){return b&&b.__esModule?b:{default:b}}function _interopRequireWildcard(b){if(b&&b.__esModule)return b;var c={};if(null!=b)for(var d in b)Object.prototype.hasOwnProperty.call(b,d)&&(c[d]=b[d]);return c.default=b,c}const attrName=b=>b.attrName;class Term{constructor(b,c){let d=_sweetSpec2.default.getDescendant(b);if(null==d)throw new Error(`Unknown term: ${b}`);this.type=b,this.loc=null,this.spec=d;let e=Object.keys(c),g=d.getAttributes().map(attrName),h=R.symmetricDifference(e,g);if(0!==h.length)throw new Error(`Unexpected properties for term ${b}: ${h}`);Object.assign(this,c)}extend(b){let c=this.spec.getAttributes().map(attrName),d=R.pick(c,this),e=R.difference(Object.keys(b),c);if(0<e.length)throw new Error(`Unexpected properties for term ${this.type}: ${e}`);return new Term(this.type,Object.assign(d,b))}gen(){let b=0>=arguments.length||arguments[0]===void 0||arguments[0],c={};for(let d of this.spec.getAttributes())if(null==this[d.attrName])c[d.attrName]=null;else if(this[d.attrName]instanceof Term)c[d.attrName]=this[d.attrName].gen(b);else if(_immutable.List.isList(this[d.attrName])){let e=b?R.complement(isCompiletimeStatement):R.both(R.complement(isImportDeclaration),R.complement(isCompiletimeStatement));c[d.attrName]=this[d.attrName].filter(e).map(g=>g instanceof Term?g.gen(b):g)}else c[d.attrName]=this[d.attrName];return new Term(this.type,c)}visit(b){let c={};for(let d of _sweetSpec2.default.getDescendant(this.type).getAttributes())c[d.attrName]=null==this[d.attrName]?null:_immutable.List.isList(this[d.attrName])?this[d.attrName].map(e=>null==e?null:b(e)):b(this[d.attrName]);return this.extend(c)}addScope(b,c,d,e){return this.visit(g=>{return"function"==typeof g.addScope?g.addScope(b,c,d,e):g})}removeScope(b,c){return this.visit(d=>{return"function"==typeof d.removeScope?d.removeScope(b,c):d})}lineNumber(){for(let b of _sweetSpec2.default.getDescendant(this.type).getAttributes())if(typeof this[b.attrName]&&"function"===this[b.attrName].lineNumber)return this[b.attrName].lineNumber()}setLineNumber(b){let c={};for(let d of _sweetSpec2.default.getDescendant(this.type).getAttributes())c[d.attrName]=null==this[d.attrName]?null:"function"==typeof this[d.attrName].setLineNumber?this[d.attrName].setLineNumber(b):_immutable.List.isList(this[d.attrName])?this[d.attrName].map(e=>e.setLineNumber(b)):this[d.attrName];return new Term(this.type,c)}}exports.default=Term;const isBindingWithDefault=exports.isBindingWithDefault=R.whereEq({type:"BindingWithDefault"}),isBindingIdentifier=exports.isBindingIdentifier=R.whereEq({type:"BindingIdentifier"}),isArrayBinding=exports.isArrayBinding=R.whereEq({type:"ArrayBinding"}),isObjectBinding=exports.isObjectBinding=R.whereEq({type:"ObjectBinding"}),isBindingPropertyIdentifier=exports.isBindingPropertyIdentifier=R.whereEq({type:"BindingPropertyIdentifier"}),isBindingPropertyProperty=exports.isBindingPropertyProperty=R.whereEq({type:"BindingPropertyIdentifier"}),isClassExpression=exports.isClassExpression=R.whereEq({type:"ClassExpression"}),isClassDeclaration=exports.isClassDeclaration=R.whereEq({type:"ClassDeclaration"}),isClassElement=exports.isClassElement=R.whereEq({type:"ClassElement"}),isModule=exports.isModule=R.whereEq({type:"Module"}),isImport=exports.isImport=R.whereEq({type:"Import"}),isImportNamespace=exports.isImportNamespace=R.whereEq({type:"ImportNamespace"}),isImportSpecifier=exports.isImportSpecifier=R.whereEq({type:"ImportSpecifier"}),isExportAllFrom=exports.isExportAllFrom=R.whereEq({type:"ExportAllFrom"}),isExportFrom=exports.isExportFrom=R.whereEq({type:"ExportFrom"}),isExport=exports.isExport=R.whereEq({type:"Export"}),isExportDefault=exports.isExportDefault=R.whereEq({type:"ExportDefault"}),isExportSpecifier=exports.isExportSpecifier=R.whereEq({type:"ExportSpecifier"}),isMethod=exports.isMethod=R.whereEq({type:"Method"}),isGetter=exports.isGetter=R.whereEq({type:"Getter"}),isSetter=exports.isSetter=R.whereEq({type:"Setter"}),isDataProperty=exports.isDataProperty=R.whereEq({type:"DataProperty"}),isShorthandProperty=exports.isShorthandProperty=R.whereEq({type:"ShorthandProperty"}),isComputedPropertyName=exports.isComputedPropertyName=R.whereEq({type:"ComputedPropertyName"}),isStaticPropertyName=exports.isStaticPropertyName=R.whereEq({type:"StaticPropertyName"}),isLiteralBooleanExpression=exports.isLiteralBooleanExpression=R.whereEq({type:"LiteralBooleanExpression"}),isLiteralInfinityExpression=exports.isLiteralInfinityExpression=R.whereEq({type:"LiteralInfinityExpression"}),isLiteralNullExpression=exports.isLiteralNullExpression=R.whereEq({type:"LiteralNullExpression"}),isLiteralNumericExpression=exports.isLiteralNumericExpression=R.whereEq({type:"LiteralNumericExpression"}),isLiteralRegExpExpression=exports.isLiteralRegExpExpression=R.whereEq({type:"LiteralRegExpExpression"}),isLiteralStringExpression=exports.isLiteralStringExpression=R.whereEq({type:"LiteralStringExpression"}),isArrayExpression=exports.isArrayExpression=R.whereEq({type:"ArrayExpression"}),isArrowExpression=exports.isArrowExpression=R.whereEq({type:"ArrowExpression"}),isAssignmentExpression=exports.isAssignmentExpression=R.whereEq({type:"AssignmentExpression"}),isBinaryExpression=exports.isBinaryExpression=R.whereEq({type:"BinaryExpression"}),isCallExpression=exports.isCallExpression=R.whereEq({type:"CallExpression"}),isComputedAssignmentExpression=exports.isComputedAssignmentExpression=R.whereEq({type:"ComputedAssignmentExpression"}),isComputedMemberExpression=exports.isComputedMemberExpression=R.whereEq({type:"ComputedMemberExpression"}),isConditionalExpression=exports.isConditionalExpression=R.whereEq({type:"ConditionalExpression"}),isFunctionExpression=exports.isFunctionExpression=R.whereEq({type:"FunctionExpression"}),isIdentifierExpression=exports.isIdentifierExpression=R.whereEq({type:"IdentifierExpression"}),isNewExpression=exports.isNewExpression=R.whereEq({type:"NewExpression"}),isNewTargetExpression=exports.isNewTargetExpression=R.whereEq({type:"NewTargetExpression"}),isObjectExpression=exports.isObjectExpression=R.whereEq({type:"ObjectExpression"}),isUnaryExpression=exports.isUnaryExpression=R.whereEq({type:"UnaryExpression"}),isStaticMemberExpression=exports.isStaticMemberExpression=R.whereEq({type:"StaticMemberExpression"}),isTemplateExpression=exports.isTemplateExpression=R.whereEq({type:"TemplateExpression"}),isThisExpression=exports.isThisExpression=R.whereEq({type:"ThisExpression"}),isUpdateExpression=exports.isUpdateExpression=R.whereEq({type:"UpdateExpression"}),isYieldExpression=exports.isYieldExpression=R.whereEq({type:"YieldExpression"}),isYieldGeneratorExpression=exports.isYieldGeneratorExpression=R.whereEq({type:"YieldGeneratorExpression"}),isBlockStatement=exports.isBlockStatement=R.whereEq({type:"BlockStatement"}),isBreakStatement=exports.isBreakStatement=R.whereEq({type:"BreakStatement"}),isContinueStatement=exports.isContinueStatement=R.whereEq({type:"ContinueStatement"}),isCompoundAssignmentExpression=exports.isCompoundAssignmentExpression=R.whereEq({type:"CompoundAssignmentExpression"}),isDebuggerStatement=exports.isDebuggerStatement=R.whereEq({type:"DebuggerStatement"}),isDoWhileStatement=exports.isDoWhileStatement=R.whereEq({type:"DoWhileStatement"}),isEmptyStatement=exports.isEmptyStatement=R.whereEq({type:"EmptyStatement"}),isExpressionStatement=exports.isExpressionStatement=R.whereEq({type:"ExpressionStatement"}),isForInStatement=exports.isForInStatement=R.whereEq({type:"ForInStatement"}),isForOfStatement=exports.isForOfStatement=R.whereEq({type:"ForOfStatement"}),isForStatement=exports.isForStatement=R.whereEq({type:"ForStatement"}),isIfStatement=exports.isIfStatement=R.whereEq({type:"IfStatement"}),isLabeledStatement=exports.isLabeledStatement=R.whereEq({type:"LabeledStatement"}),isReturnStatement=exports.isReturnStatement=R.whereEq({type:"ReturnStatement"}),isSwitchStatement=exports.isSwitchStatement=R.whereEq({type:"SwitchStatement"}),isSwitchStatementWithDefault=exports.isSwitchStatementWithDefault=R.whereEq({type:"SwitchStatementWithDefault"}),isThrowStatement=exports.isThrowStatement=R.whereEq({type:"ThrowStatement"}),isTryCatchStatement=exports.isTryCatchStatement=R.whereEq({type:"TryCatchStatement"}),isTryFinallyStatement=exports.isTryFinallyStatement=R.whereEq({type:"TryFinallyStatement"}),isVariableDeclarationStatement=exports.isVariableDeclarationStatement=R.whereEq({type:"VariableDeclarationStatement"}),isWhileStatement=exports.isWhileStatement=R.whereEq({type:"WhileStatement"}),isWithStatement=exports.isWithStatement=R.whereEq({type:"WithStatement"}),isPragma=exports.isPragma=R.whereEq({type:"Pragma"}),isBlock=exports.isBlock=R.whereEq({type:"Block"}),isCatchClause=exports.isCatchClause=R.whereEq({type:"CatchClause"}),isDirective=exports.isDirective=R.whereEq({type:"Directive"}),isFormalParameters=exports.isFormalParameters=R.whereEq({type:"FormalParameters"}),isFunctionBody=exports.isFunctionBody=R.whereEq({type:"FunctionBody"}),isFunctionDeclaration=exports.isFunctionDeclaration=R.whereEq({type:"FunctionDeclaration"}),isScript=exports.isScript=R.whereEq({type:"Script"}),isSpreadElement=exports.isSpreadElement=R.whereEq({type:"SpreadElement"}),isSuper=exports.isSuper=R.whereEq({type:"Super"}),isSwitchCase=exports.isSwitchCase=R.whereEq({type:"SwitchCase"}),isSwitchDefault=exports.isSwitchDefault=R.whereEq({type:"SwitchDefault"}),isTemplateElement=exports.isTemplateElement=R.whereEq({type:"TemplateElement"}),isSyntaxTemplate=exports.isSyntaxTemplate=R.whereEq({type:"SyntaxTemplate"}),isVariableDeclaration=exports.isVariableDeclaration=R.whereEq({type:"VariableDeclaration"}),isVariableDeclarator=exports.isVariableDeclarator=R.whereEq({type:"VariableDeclarator"}),isEOF=exports.isEOF=R.whereEq({type:"EOF"}),isSyntaxDeclaration=exports.isSyntaxDeclaration=R.both(isVariableDeclaration,R.whereEq({kind:"syntax"})),isSyntaxrecDeclaration=exports.isSyntaxrecDeclaration=R.both(isVariableDeclaration,R.whereEq({kind:"syntaxrec"})),isFunctionTerm=exports.isFunctionTerm=R.either(isFunctionDeclaration,isFunctionExpression),isFunctionWithName=exports.isFunctionWithName=R.and(isFunctionTerm,R.complement(R.where({name:R.isNil}))),isParenthesizedExpression=exports.isParenthesizedExpression=R.whereEq({type:"ParenthesizedExpression"}),isExportSyntax=exports.isExportSyntax=R.both(isExport,b=>R.or(isSyntaxDeclaration(b.declaration),isSyntaxrecDeclaration(b.declaration))),isSyntaxDeclarationStatement=exports.isSyntaxDeclarationStatement=R.both(isVariableDeclarationStatement,b=>isCompiletimeDeclaration(b.declaration)),isCompiletimeDeclaration=exports.isCompiletimeDeclaration=R.either(isSyntaxDeclaration,isSyntaxrecDeclaration),isCompiletimeStatement=exports.isCompiletimeStatement=b=>{return b instanceof Term&&isVariableDeclarationStatement(b)&&isCompiletimeDeclaration(b.declaration)},isImportDeclaration=exports.isImportDeclaration=R.either(isImport,isImportNamespace);

